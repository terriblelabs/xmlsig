/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "3"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif

/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif


/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a funtion in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}




/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. */
static VALUE swig_ruby_trackings;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete = 0;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects.  Also make sure to tell
     the garabage collector about the hash table. */
  swig_ruby_trackings = rb_hash_new();
  rb_gc_register_address(&swig_ruby_trackings);
  
  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  unsigned long value = (unsigned long) ptr;
  return LONG2NUM(value);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  unsigned long value = (unsigned long) object;
  return LONG2NUM(value);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* First convert the Ruby number to a C number */
  unsigned long value = NUM2LONG(reference);
  return (VALUE) value;
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule()	
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


static VALUE _mSWIG = Qnil;
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    if (sklass->trackObjects) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "__swigtype__");
        char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), (own ? VOIDFUNC(sklass->destroy) : 0), ptr);

    /* If tracking is on for this class then track this object. */
    if (sklass->trackObjects) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    }
    *ptr = SWIG_TypeCast(tc, vptr);
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void)
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CountPtrToTKeyStore_t swig_types[0]
#define SWIGTYPE_p_CountPtrToTKey_t swig_types[1]
#define SWIGTYPE_p_CountPtrToTX509Certificate_t swig_types[2]
#define SWIGTYPE_p_CountPtrToTXPath_t swig_types[3]
#define SWIGTYPE_p_CountPtrToTXmlDoc_t swig_types[4]
#define SWIGTYPE_p_CountPtrToTXmlElement_t swig_types[5]
#define SWIGTYPE_p_DocError swig_types[6]
#define SWIGTYPE_p_DsigException swig_types[7]
#define SWIGTYPE_p_IOError swig_types[8]
#define SWIGTYPE_p_Key swig_types[9]
#define SWIGTYPE_p_KeyError swig_types[10]
#define SWIGTYPE_p_KeyStore swig_types[11]
#define SWIGTYPE_p_LibError swig_types[12]
#define SWIGTYPE_p_MemoryError swig_types[13]
#define SWIGTYPE_p_Signer swig_types[14]
#define SWIGTYPE_p_SimpleTrustVerifier swig_types[15]
#define SWIGTYPE_p_TrustVerificationError swig_types[16]
#define SWIGTYPE_p_TrustVerifier swig_types[17]
#define SWIGTYPE_p_ValueError swig_types[18]
#define SWIGTYPE_p_Verifier swig_types[19]
#define SWIGTYPE_p_X509Certificate swig_types[20]
#define SWIGTYPE_p_X509TrustVerifier swig_types[21]
#define SWIGTYPE_p_XMLError swig_types[22]
#define SWIGTYPE_p_XPath swig_types[23]
#define SWIGTYPE_p_XPathError swig_types[24]
#define SWIGTYPE_p_XmlDoc swig_types[25]
#define SWIGTYPE_p_XmlElement swig_types[26]
#define SWIGTYPE_p_char swig_types[27]
#define SWIGTYPE_p_std__out_of_range swig_types[28]
#define SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t swig_types[29]
#define SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t swig_types[30]
#define SWIGTYPE_p_std__vectorTCountPtrToTXmlElement_t_t swig_types[31]
#define SWIGTYPE_p_vectorTCountPtrToTX509Certificate_t_t swig_types[32]
#define SWIGTYPE_p_xmlNodePtr swig_types[33]
static swig_type_info *swig_types[35];
static swig_module_info swig_module = {swig_types, 34, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_xmlsig
#define SWIG_name    "Xmlsig"

static VALUE mXmlsig;

#define SWIGVERSION 0x010331 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <string>


#include <stdexcept>


#include <string>

#define SWIG_FLOAT_P(x) ((TYPE(x) == T_FLOAT) || FIXNUM_P(x))

bool SWIG_BOOL_P(VALUE) {
    // dummy test, RTEST should take care of everything
    return true;
}
bool SWIG_RB2BOOL(VALUE x) {
    return RTEST(x);
}
VALUE SWIG_BOOL2RB(bool b) {
    return b ? Qtrue : Qfalse;
}
double SWIG_NUM2DBL(VALUE x) {
    return (FIXNUM_P(x) ? FIX2INT(x) : NUM2DBL(x));
}
bool SWIG_STRING_P(VALUE x) {
    return TYPE(x) == T_STRING;
}
std::string SWIG_RB2STR(VALUE x) {
    return std::string(RSTRING_PTR(x), RSTRING_LEN(x));
}
VALUE SWIG_STR2RB(const std::string& s) {
    return rb_str_new(s.data(), s.size());
}


#include <vector>
#include <algorithm>
#include <stdexcept>


#include "DSig.h"
#include "Signer.h"
#include "Key.h"
#include "XmlDoc.h"
#include "Verifier.h"
#include "KeyStore.h"
#include "TrustVerifier.h"
#include <libxml/tree.h>


#include <limits.h>
#ifndef LLONG_MIN
# define LLONG_MIN	LONG_LONG_MIN
#endif
#ifndef LLONG_MAX
# define LLONG_MAX	LONG_LONG_MAX
#endif
#ifndef ULLONG_MAX
# define ULLONG_MAX	ULONG_LONG_MAX
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include "Exceptions.h"
    

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    


    char *cstr = STR2CSTR(obj);
    
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (VALUE obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE VALUE
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}

SWIGINTERN CountPtrTo<X509Certificate > *new_CountPtrTo_Sl_X509Certificate_Sg___SWIG_0(){
        return new CountPtrTo<X509Certificate>(new X509Certificate());
    }
SWIGINTERN CountPtrTo<X509Certificate > *new_CountPtrTo_Sl_X509Certificate_Sg___SWIG_1(CountPtrTo<X509Certificate > const &cert){
        return new CountPtrTo<X509Certificate>(new X509Certificate(*cert));
    }

SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}

SWIGINTERN CountPtrTo<X509Certificate > std_vector_Sl_X509CertificatePtr_Sg__pop(std::vector<X509CertificatePtr > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                CountPtrTo<X509Certificate > x = self->back();
                self->pop_back();
                return x;
            }

/*@SWIG:%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN CountPtrTo<X509Certificate > &std_vector_Sl_X509CertificatePtr_Sg____getitem__(std::vector<X509CertificatePtr > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_X509CertificatePtr_Sg____setitem__(std::vector<X509CertificatePtr > *self,int i,CountPtrTo<X509Certificate > const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_X509CertificatePtr_Sg__each(std::vector<X509CertificatePtr > *self){
                for (unsigned int i=0; i<self->size(); i++) {
                    CountPtrTo<X509Certificate >* x = &((*self)[i]);
                    rb_yield(SWIG_NewPointerObj((void *) x, 
                                                SWIGTYPE_p_CountPtrToTX509Certificate_t, 0));
                }
            }
SWIGINTERN CountPtrTo<Key > *new_CountPtrTo_Sl_Key_Sg___SWIG_0(){
        return new CountPtrTo<Key>(new Key());
    }
SWIGINTERN CountPtrTo<Key > *new_CountPtrTo_Sl_Key_Sg___SWIG_1(CountPtrTo<Key > const &key){
        return new CountPtrTo<Key>(new Key(*key));
    }
SWIGINTERN CountPtrTo<Key > *new_CountPtrTo_Sl_Key_Sg___SWIG_2(X509CertificatePtr cert){
        return new CountPtrTo<Key>(new Key(cert));
    }
SWIGINTERN CountPtrTo<Key > *new_CountPtrTo_Sl_Key_Sg___SWIG_3(std::vector<X509CertificatePtr > certs){
        return new CountPtrTo<Key>(new Key(certs));
    }
SWIGINTERN CountPtrTo<Key > std_vector_Sl_KeyPtr_Sg__pop(std::vector<KeyPtr > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                CountPtrTo<Key > x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN CountPtrTo<Key > &std_vector_Sl_KeyPtr_Sg____getitem__(std::vector<KeyPtr > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_KeyPtr_Sg____setitem__(std::vector<KeyPtr > *self,int i,CountPtrTo<Key > const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_KeyPtr_Sg__each(std::vector<KeyPtr > *self){
                for (unsigned int i=0; i<self->size(); i++) {
                    CountPtrTo<Key >* x = &((*self)[i]);
                    rb_yield(SWIG_NewPointerObj((void *) x, 
                                                SWIGTYPE_p_CountPtrToTKey_t, 0));
                }
            }
SWIGINTERN CountPtrTo<KeyStore > *new_CountPtrTo_Sl_KeyStore_Sg_(){
        return new CountPtrTo<KeyStore>(new KeyStore());
    }
SWIGINTERN CountPtrTo<XmlDoc > *new_CountPtrTo_Sl_XmlDoc_Sg___SWIG_0(){
        return new CountPtrTo<XmlDoc>(new XmlDoc());
    }
SWIGINTERN CountPtrTo<XmlDoc > *new_CountPtrTo_Sl_XmlDoc_Sg___SWIG_1(CountPtrTo<XmlDoc > const &doc){
        return new CountPtrTo<XmlDoc>(new XmlDoc(*doc));
    }
SWIGINTERN CountPtrTo<XPath > *new_CountPtrTo_Sl_XPath_Sg___SWIG_0(){
        return new CountPtrTo<XPath>(new XPath());
    }
SWIGINTERN CountPtrTo<XPath > *new_CountPtrTo_Sl_XPath_Sg___SWIG_1(CountPtrTo<XPath > const &xpath){
        return new CountPtrTo<XPath>(new XPath(*xpath));
    }
SWIGINTERN CountPtrTo<XPath > *new_CountPtrTo_Sl_XPath_Sg___SWIG_2(std::string expr){
        return new CountPtrTo<XPath>(new XPath(expr));
    }
SWIGINTERN CountPtrTo<XmlElement > *new_CountPtrTo_Sl_XmlElement_Sg_(){
        return new CountPtrTo<XmlElement>(new XmlElement());
    }
SWIGINTERN CountPtrTo<XmlElement > std_vector_Sl_XmlElementPtr_Sg__pop(std::vector<XmlElementPtr > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                CountPtrTo<XmlElement > x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN CountPtrTo<XmlElement > &std_vector_Sl_XmlElementPtr_Sg____getitem__(std::vector<XmlElementPtr > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_XmlElementPtr_Sg____setitem__(std::vector<XmlElementPtr > *self,int i,CountPtrTo<XmlElement > const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_XmlElementPtr_Sg__each(std::vector<XmlElementPtr > *self){
                for (unsigned int i=0; i<self->size(); i++) {
                    CountPtrTo<XmlElement >* x = &((*self)[i]);
                    rb_yield(SWIG_NewPointerObj((void *) x, 
                                                SWIGTYPE_p_CountPtrToTXmlElement_t, 0));
                }
            }

SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}

SWIGINTERN VALUE
_wrap_dsigInit(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (int)dsigInit();
  }
  catch(LibError &_e) {
    rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
  }
  
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_dsigShutdown(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (int)dsigShutdown();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cDsigException;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_DsigException_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_DsigException_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_DsigException);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_DsigException(int argc, VALUE *argv, VALUE self) {
  DsigException *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (DsigException *)new DsigException();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DsigException_what(int argc, VALUE *argv, VALUE self) {
  DsigException *arg1 = (DsigException *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_DsigException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "what" "', argument " "1"" of type '" "DsigException const *""'"); 
  }
  arg1 = reinterpret_cast< DsigException * >(argp1);
  result = (char *)((DsigException const *)arg1)->what();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_DsigException(DsigException *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cIOError;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_IOError_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_IOError_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_IOError);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_IOError(int argc, VALUE *argv, VALUE self) {
  IOError *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (IOError *)new IOError();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_IOError(IOError *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cMemoryError;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MemoryError_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MemoryError_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_MemoryError);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MemoryError(int argc, VALUE *argv, VALUE self) {
  MemoryError *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (MemoryError *)new MemoryError();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_MemoryError(MemoryError *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cValueError;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ValueError_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ValueError_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_ValueError);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ValueError(int argc, VALUE *argv, VALUE self) {
  ValueError *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (ValueError *)new ValueError();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_ValueError(ValueError *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cXMLError;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XMLError_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XMLError_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XMLError);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XMLError(int argc, VALUE *argv, VALUE self) {
  XMLError *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (XMLError *)new XMLError();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_XMLError(XMLError *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cKeyError;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_KeyError_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_KeyError_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_KeyError);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_KeyError(int argc, VALUE *argv, VALUE self) {
  KeyError *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (KeyError *)new KeyError();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_KeyError(KeyError *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cDocError;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_DocError_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_DocError_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_DocError);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_DocError(int argc, VALUE *argv, VALUE self) {
  DocError *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (DocError *)new DocError();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_DocError(DocError *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cXPathError;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XPathError_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XPathError_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XPathError);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XPathError(int argc, VALUE *argv, VALUE self) {
  XPathError *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (XPathError *)new XPathError();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_XPathError(XPathError *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cTrustVerificationError;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_TrustVerificationError_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_TrustVerificationError_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TrustVerificationError);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_TrustVerificationError(int argc, VALUE *argv, VALUE self) {
  TrustVerificationError *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (TrustVerificationError *)new TrustVerificationError();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_TrustVerificationError(TrustVerificationError *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cLibError;

SWIGINTERN VALUE
_wrap_LibError_clearErrorLogs(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  LibError::clearErrorLogs();
  return Qnil;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_LibError_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_LibError_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_LibError);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_LibError(int argc, VALUE *argv, VALUE self) {
  LibError *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (LibError *)new LibError();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_LibError(LibError *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cX509CertificateBase;

SWIGINTERN VALUE
_wrap_new_X509CertificateBase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  X509Certificate *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (X509Certificate *)new X509Certificate();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_X509CertificateBase_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_X509CertificateBase_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_X509Certificate);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_X509CertificateBase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  X509Certificate *arg1 = 0 ;
  X509Certificate *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_X509Certificate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "X509Certificate" "', argument " "1"" of type '" "X509Certificate const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "X509Certificate" "', argument " "1"" of type '" "X509Certificate const &""'"); 
  }
  arg1 = reinterpret_cast< X509Certificate * >(argp1);
  {
    try 
    {
      try {
        result = (X509Certificate *)new X509Certificate((X509Certificate const &)*arg1);DATA_PTR(self) = result;
        SWIG_RubyAddTracking(result, self);
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_X509CertificateBase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_X509CertificateBase__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_X509Certificate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_X509CertificateBase__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_X509CertificateBase'");
  return Qnil;
}


SWIGINTERN void
free_X509Certificate(X509Certificate *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_X509CertificateBase_loadFromFile(int argc, VALUE *argv, VALUE self) {
  X509Certificate *arg1 = (X509Certificate *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_X509Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadFromFile" "', argument " "1"" of type '" "X509Certificate *""'"); 
  }
  arg1 = reinterpret_cast< X509Certificate * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->loadFromFile(arg2,arg3);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateBase_getSubjectDN(int argc, VALUE *argv, VALUE self) {
  X509Certificate *arg1 = (X509Certificate *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_X509Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getSubjectDN" "', argument " "1"" of type '" "X509Certificate *""'"); 
  }
  arg1 = reinterpret_cast< X509Certificate * >(argp1);
  {
    try 
    {
      result = (arg1)->getSubjectDN(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateBase_getIssuerDN(int argc, VALUE *argv, VALUE self) {
  X509Certificate *arg1 = (X509Certificate *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_X509Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getIssuerDN" "', argument " "1"" of type '" "X509Certificate *""'"); 
  }
  arg1 = reinterpret_cast< X509Certificate * >(argp1);
  {
    try 
    {
      result = (arg1)->getIssuerDN(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateBase_getVersion(int argc, VALUE *argv, VALUE self) {
  X509Certificate *arg1 = (X509Certificate *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_X509Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getVersion" "', argument " "1"" of type '" "X509Certificate *""'"); 
  }
  arg1 = reinterpret_cast< X509Certificate * >(argp1);
  {
    try 
    {
      result = (int)(arg1)->getVersion(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateBase_isValid(int argc, VALUE *argv, VALUE self) {
  X509Certificate *arg1 = (X509Certificate *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_X509Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isValid" "', argument " "1"" of type '" "X509Certificate *""'"); 
  }
  arg1 = reinterpret_cast< X509Certificate * >(argp1);
  {
    try 
    {
      result = (int)(arg1)->isValid(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateBase_getBasicConstraints(int argc, VALUE *argv, VALUE self) {
  X509Certificate *arg1 = (X509Certificate *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_X509Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getBasicConstraints" "', argument " "1"" of type '" "X509Certificate *""'"); 
  }
  arg1 = reinterpret_cast< X509Certificate * >(argp1);
  {
    try 
    {
      result = (int)(arg1)->getBasicConstraints(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateBase_getKey(int argc, VALUE *argv, VALUE self) {
  X509Certificate *arg1 = (X509Certificate *) 0 ;
  SwigValueWrapper<CountPtrTo<Key > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_X509Certificate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getKey" "', argument " "1"" of type '" "X509Certificate const *""'"); 
  }
  arg1 = reinterpret_cast< X509Certificate * >(argp1);
  {
    try 
    {
      result = ((X509Certificate const *)arg1)->getKey(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new KeyPtr(static_cast< const KeyPtr& >(result))), SWIGTYPE_p_CountPtrToTKey_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class cX509Certificate;

SWIGINTERN void
free_CountPtrTo_Sl_X509Certificate_Sg_(CountPtrTo<X509Certificate > *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_X509Certificate___deref__(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<X509Certificate > *arg1 = (CountPtrTo<X509Certificate > *) 0 ;
  X509Certificate *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTX509Certificate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator ->" "', argument " "1"" of type '" "CountPtrTo<X509Certificate > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<X509Certificate > * >(argp1);
  {
    try 
    {
      result = (X509Certificate *)(arg1)->operator ->(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_X509Certificate, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_X509Certificate__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<X509Certificate > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (CountPtrTo<X509Certificate > *)new_CountPtrTo_Sl_X509Certificate_Sg___SWIG_0();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_X509Certificate_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_X509Certificate_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CountPtrToTX509Certificate_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_X509Certificate__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<X509Certificate > *arg1 = 0 ;
  CountPtrTo<X509Certificate > *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CountPtrToTX509Certificate_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CountPtrTo<(X509Certificate)>" "', argument " "1"" of type '" "CountPtrTo<X509Certificate > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CountPtrTo<(X509Certificate)>" "', argument " "1"" of type '" "CountPtrTo<X509Certificate > const &""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<X509Certificate > * >(argp1);
  {
    try 
    {
      try {
        result = (CountPtrTo<X509Certificate > *)new_CountPtrTo_Sl_X509Certificate_Sg___SWIG_1((CountPtrTo<X509Certificate > const &)*arg1);DATA_PTR(self) = result;
        SWIG_RubyAddTracking(result, self);
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_X509Certificate(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_X509Certificate__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTX509Certificate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_X509Certificate__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_X509Certificate'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509Certificate_loadFromFile(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<X509Certificate > *arg1 = (CountPtrTo<X509Certificate > *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTX509Certificate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadFromFile" "', argument " "1"" of type '" "CountPtrTo<X509Certificate > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<X509Certificate > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->loadFromFile(arg2,arg3);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509Certificate_getSubjectDN(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<X509Certificate > *arg1 = (CountPtrTo<X509Certificate > *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTX509Certificate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getSubjectDN" "', argument " "1"" of type '" "CountPtrTo<X509Certificate > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<X509Certificate > * >(argp1);
  {
    try 
    {
      result = (*arg1)->getSubjectDN(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509Certificate_getIssuerDN(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<X509Certificate > *arg1 = (CountPtrTo<X509Certificate > *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTX509Certificate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getIssuerDN" "', argument " "1"" of type '" "CountPtrTo<X509Certificate > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<X509Certificate > * >(argp1);
  {
    try 
    {
      result = (*arg1)->getIssuerDN(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509Certificate_getVersion(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<X509Certificate > *arg1 = (CountPtrTo<X509Certificate > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTX509Certificate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getVersion" "', argument " "1"" of type '" "CountPtrTo<X509Certificate > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<X509Certificate > * >(argp1);
  {
    try 
    {
      result = (int)(*arg1)->getVersion(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509Certificate_isValid(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<X509Certificate > *arg1 = (CountPtrTo<X509Certificate > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTX509Certificate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isValid" "', argument " "1"" of type '" "CountPtrTo<X509Certificate > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<X509Certificate > * >(argp1);
  {
    try 
    {
      result = (int)(*arg1)->isValid(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509Certificate_getBasicConstraints(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<X509Certificate > *arg1 = (CountPtrTo<X509Certificate > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTX509Certificate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getBasicConstraints" "', argument " "1"" of type '" "CountPtrTo<X509Certificate > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<X509Certificate > * >(argp1);
  {
    try 
    {
      result = (int)(*arg1)->getBasicConstraints(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509Certificate_getKey(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<X509Certificate > *arg1 = (CountPtrTo<X509Certificate > *) 0 ;
  SwigValueWrapper<CountPtrTo<Key > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTX509Certificate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getKey" "', argument " "1"" of type '" "CountPtrTo<X509Certificate > const *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<X509Certificate > * >(argp1);
  {
    try 
    {
      result = (*arg1)->getKey(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new KeyPtr(static_cast< const KeyPtr& >(result))), SWIGTYPE_p_CountPtrToTKey_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class cX509CertificateVector;

SWIGINTERN VALUE
_wrap_new_X509CertificateVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector<X509CertificatePtr > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (std::vector<X509CertificatePtr > *)new std::vector<X509CertificatePtr >();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_X509CertificateVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  unsigned int arg1 ;
  std::vector<X509CertificatePtr > *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "std::vector<(X509CertificatePtr)>" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try 
    {
      result = (std::vector<X509CertificatePtr > *)new std::vector<X509CertificatePtr >(arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_X509CertificateVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  unsigned int arg1 ;
  CountPtrTo<X509Certificate > *arg2 = 0 ;
  std::vector<X509CertificatePtr > *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "std::vector<(X509CertificatePtr)>" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CountPtrToTX509Certificate_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "std::vector<(X509CertificatePtr)>" "', argument " "2"" of type '" "CountPtrTo<X509Certificate > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "std::vector<(X509CertificatePtr)>" "', argument " "2"" of type '" "CountPtrTo<X509Certificate > const &""'"); 
  }
  arg2 = reinterpret_cast< CountPtrTo<X509Certificate > * >(argp2);
  {
    try 
    {
      result = (std::vector<X509CertificatePtr > *)new std::vector<X509CertificatePtr >(arg1,(CountPtrTo<X509Certificate > const &)*arg2);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_X509CertificateVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_X509CertificateVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_X509CertificateVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector<CountPtrTo<X509Certificate > > *arg1 = 0 ;
  std::vector<X509CertificatePtr > *result = 0 ;
  std::vector<CountPtrTo<X509Certificate > > temp1 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
      unsigned int size = RARRAY_LEN(argv[0]);
      arg1 = &temp1;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(argv[0])[i];
        CountPtrTo<X509Certificate >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTX509Certificate_t, 1);
        temp1.push_back(*x);
      }
    } else {
      SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 1);
    }
  }
  {
    try 
    {
      result = (std::vector<X509CertificatePtr > *)new std::vector<X509CertificatePtr >((std::vector<CountPtrTo<X509Certificate > > const &)*arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_X509CertificateVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_X509CertificateVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_X509CertificateVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      /* native sequence? */
      if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
        unsigned int size = RARRAY_LEN(argv[0]);
        if (size == 0) {
          /* an empty sequence can be of any type */
          _v = 1;
        } else {
          /* check the first element only */
          CountPtrTo<X509Certificate >* x;
          VALUE o = RARRAY_PTR(argv[0])[0];
          if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_CountPtrToTX509Certificate_t,0)) != -1)
          _v = 1;
          else
          _v = 0;
        }
      } else {
        /* wrapped vector? */
        std::vector<CountPtrTo<X509Certificate > >* v;
        if (SWIG_ConvertPtr(argv[0],(void **) &v, 
            SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t,0) != -1)
        _v = 1;
        else
        _v = 0;
      }
    }
    if (_v) {
      return _wrap_new_X509CertificateVector__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTX509Certificate_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_X509CertificateVector__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_X509CertificateVector'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateVector___len__(int argc, VALUE *argv, VALUE self) {
  std::vector<X509CertificatePtr > *arg1 = (std::vector<X509CertificatePtr > *) 0 ;
  unsigned int result;
  std::vector<CountPtrTo<X509Certificate > > temp1 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    if (rb_obj_is_kind_of(self,rb_cArray)) {
      unsigned int size = RARRAY_LEN(self);
      arg1 = &temp1;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(self)[i];
        CountPtrTo<X509Certificate >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTX509Certificate_t, 1);
        temp1.push_back(*x);
      }
    } else {
      SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 1);
    }
  }
  {
    try 
    {
      result = (unsigned int)((std::vector<X509CertificatePtr > const *)arg1)->size(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector<X509CertificatePtr > *arg1 = (std::vector<X509CertificatePtr > *) 0 ;
  bool result;
  std::vector<CountPtrTo<X509Certificate > > temp1 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    if (rb_obj_is_kind_of(self,rb_cArray)) {
      unsigned int size = RARRAY_LEN(self);
      arg1 = &temp1;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(self)[i];
        CountPtrTo<X509Certificate >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTX509Certificate_t, 1);
        temp1.push_back(*x);
      }
    } else {
      SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 1);
    }
  }
  {
    try 
    {
      result = (bool)((std::vector<X509CertificatePtr > const *)arg1)->empty(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector<X509CertificatePtr > *arg1 = (std::vector<X509CertificatePtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "std::vector<X509CertificatePtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<X509CertificatePtr > * >(argp1);
  {
    try 
    {
      (arg1)->clear(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector<X509CertificatePtr > *arg1 = (std::vector<X509CertificatePtr > *) 0 ;
  CountPtrTo<X509Certificate > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "push_back" "', argument " "1"" of type '" "std::vector<X509CertificatePtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<X509CertificatePtr > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTX509Certificate_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "push_back" "', argument " "2"" of type '" "CountPtrTo<X509Certificate > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "push_back" "', argument " "2"" of type '" "CountPtrTo<X509Certificate > const &""'"); 
  }
  arg2 = reinterpret_cast< CountPtrTo<X509Certificate > * >(argp2);
  {
    try 
    {
      (arg1)->push_back((CountPtrTo<X509Certificate > const &)*arg2); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector<X509CertificatePtr > *arg1 = (std::vector<X509CertificatePtr > *) 0 ;
  SwigValueWrapper<CountPtrTo<X509Certificate > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pop" "', argument " "1"" of type '" "std::vector<X509CertificatePtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<X509CertificatePtr > * >(argp1);
  {
    try 
    {
      try {
        result = std_vector_Sl_X509CertificatePtr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_std__out_of_range, SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new CountPtrTo<X509Certificate >(static_cast< const CountPtrTo<X509Certificate >& >(result))), SWIGTYPE_p_CountPtrToTX509Certificate_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateVector___getitem__(int argc, VALUE *argv, VALUE self) {
  std::vector<X509CertificatePtr > *arg1 = (std::vector<X509CertificatePtr > *) 0 ;
  int arg2 ;
  CountPtrTo<X509Certificate > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "std::vector<X509CertificatePtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<X509CertificatePtr > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try 
    {
      try {
        {
          CountPtrTo<X509Certificate > &_result_ref = std_vector_Sl_X509CertificatePtr_Sg____getitem__(arg1,arg2);
          result = (CountPtrTo<X509Certificate > *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_std__out_of_range, SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CountPtrToTX509Certificate_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateVector___setitem__(int argc, VALUE *argv, VALUE self) {
  std::vector<X509CertificatePtr > *arg1 = (std::vector<X509CertificatePtr > *) 0 ;
  int arg2 ;
  CountPtrTo<X509Certificate > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "std::vector<X509CertificatePtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<X509CertificatePtr > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CountPtrToTX509Certificate_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "__setitem__" "', argument " "3"" of type '" "CountPtrTo<X509Certificate > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__setitem__" "', argument " "3"" of type '" "CountPtrTo<X509Certificate > const &""'"); 
  }
  arg3 = reinterpret_cast< CountPtrTo<X509Certificate > * >(argp3);
  {
    try 
    {
      try {
        std_vector_Sl_X509CertificatePtr_Sg____setitem__(arg1,arg2,(CountPtrTo<X509Certificate > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_std__out_of_range, SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509CertificateVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector<X509CertificatePtr > *arg1 = (std::vector<X509CertificatePtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "each" "', argument " "1"" of type '" "std::vector<X509CertificatePtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<X509CertificatePtr > * >(argp1);
  {
    try 
    {
      std_vector_Sl_X509CertificatePtr_Sg__each(arg1); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_X509CertificatePtr_Sg_(std::vector<X509CertificatePtr > *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cKeyBase;

SWIGINTERN VALUE
_wrap_new_KeyBase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Key *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (Key *)new Key();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_KeyBase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper<CountPtrTo<X509Certificate > > arg1 ;
  Key *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CountPtrToTX509Certificate_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Key" "', argument " "1"" of type '" "X509CertificatePtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Key" "', argument " "1"" of type '" "X509CertificatePtr""'");
    } else {
      arg1 = *(reinterpret_cast< X509CertificatePtr * >(argp1));
    }
  }
  {
    try 
    {
      try {
        result = (Key *)new Key(arg1);DATA_PTR(self) = result;
        SWIG_RubyAddTracking(result, self);
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_KeyBase_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_KeyBase_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Key);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_KeyBase__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector<X509CertificatePtr > arg1 ;
  Key *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
      unsigned int size = RARRAY_LEN(argv[0]);
      arg1;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(argv[0])[i];
        CountPtrTo<X509Certificate >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTX509Certificate_t, 1);
        (&arg1)->push_back(*x);
      }
    } else {
      void *ptr;
      SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 1);
      arg1 = *((std::vector<X509CertificatePtr > *) ptr);
    }
  }
  {
    try 
    {
      try {
        result = (Key *)new Key(arg1);DATA_PTR(self) = result;
        SWIG_RubyAddTracking(result, self);
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(ValueError &_e) {
        SWIG_exception(SWIG_ValueError, (&_e)->what());
        
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_KeyBase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_KeyBase__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTX509Certificate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KeyBase__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      /* native sequence? */
      if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
        unsigned int size = RARRAY_LEN(argv[0]);
        if (size == 0) {
          /* an empty sequence can be of any type */
          _v = 1;
        } else {
          /* check the first element only */
          CountPtrTo<X509Certificate >* x;
          VALUE o = RARRAY_PTR(argv[0])[0];
          if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_CountPtrToTX509Certificate_t,0)) != -1)
          _v = 1;
          else
          _v = 0;
        }
      } else {
        /* wrapped vector? */
        std::vector<CountPtrTo<X509Certificate > >* v;
        if (SWIG_ConvertPtr(argv[0],(void **) &v, 
            SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t,0) != -1)
        _v = 1;
        else
        _v = 0;
      }
    }
    if (_v) {
      return _wrap_new_KeyBase__SWIG_2(nargs, args, self);
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_KeyBase'");
  return Qnil;
}


SWIGINTERN void
free_Key(Key *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_KeyBase_loadFromFile(int argc, VALUE *argv, VALUE self) {
  Key *arg1 = (Key *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadFromFile" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->loadFromFile(arg2,arg3,arg4);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyBase_loadFromKeyInfoFile(int argc, VALUE *argv, VALUE self) {
  Key *arg1 = (Key *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadFromKeyInfoFile" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromKeyInfoFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->loadFromKeyInfoFile(arg2);
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XMLError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XMLError, SWIG_NewPointerObj((new XMLError(static_cast< const XMLError& >(_e))),SWIGTYPE_p_XMLError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyBase_loadHMACFromString(int argc, VALUE *argv, VALUE self) {
  Key *arg1 = (Key *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadHMACFromString" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadHMACFromString" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->loadHMACFromString(arg2);
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyBase_setName(int argc, VALUE *argv, VALUE self) {
  Key *arg1 = (Key *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setName" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "setName" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->setName(arg2);
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyBase_getName(int argc, VALUE *argv, VALUE self) {
  Key *arg1 = (Key *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getName" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  {
    try 
    {
      result = (arg1)->getName(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyBase_isValid(int argc, VALUE *argv, VALUE self) {
  Key *arg1 = (Key *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isValid" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  {
    try 
    {
      result = (int)(arg1)->isValid(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyBase_getCertificate(int argc, VALUE *argv, VALUE self) {
  Key *arg1 = (Key *) 0 ;
  SwigValueWrapper<CountPtrTo<X509Certificate > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCertificate" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  {
    try 
    {
      try {
        result = (arg1)->getCertificate();
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new X509CertificatePtr(static_cast< const X509CertificatePtr& >(result))), SWIGTYPE_p_CountPtrToTX509Certificate_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyBase_getCertificateChain(int argc, VALUE *argv, VALUE self) {
  Key *arg1 = (Key *) 0 ;
  SwigValueWrapper<vector<CountPtrTo<X509Certificate > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCertificateChain" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  {
    try 
    {
      result = (arg1)->getCertificateChain(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new vector<X509CertificatePtr >(static_cast< const vector<X509CertificatePtr >& >(result))), SWIGTYPE_p_vectorTCountPtrToTX509Certificate_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyBase_dump(int argc, VALUE *argv, VALUE self) {
  Key *arg1 = (Key *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dump" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  {
    try 
    {
      (arg1)->dump(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


swig_class cKey;

SWIGINTERN void
free_CountPtrTo_Sl_Key_Sg_(CountPtrTo<Key > *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Key___deref__(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<Key > *arg1 = (CountPtrTo<Key > *) 0 ;
  Key *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKey_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator ->" "', argument " "1"" of type '" "CountPtrTo<Key > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<Key > * >(argp1);
  {
    try 
    {
      result = (Key *)(arg1)->operator ->(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Key, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Key__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<Key > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (CountPtrTo<Key > *)new_CountPtrTo_Sl_Key_Sg___SWIG_0();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Key__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<Key > *arg1 = 0 ;
  CountPtrTo<Key > *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CountPtrToTKey_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CountPtrTo<(Key)>" "', argument " "1"" of type '" "CountPtrTo<Key > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CountPtrTo<(Key)>" "', argument " "1"" of type '" "CountPtrTo<Key > const &""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<Key > * >(argp1);
  {
    try 
    {
      result = (CountPtrTo<Key > *)new_CountPtrTo_Sl_Key_Sg___SWIG_1((CountPtrTo<Key > const &)*arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Key__SWIG_2(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper<CountPtrTo<X509Certificate > > arg1 ;
  CountPtrTo<Key > *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CountPtrToTX509Certificate_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CountPtrTo<(Key)>" "', argument " "1"" of type '" "X509CertificatePtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CountPtrTo<(Key)>" "', argument " "1"" of type '" "X509CertificatePtr""'");
    } else {
      arg1 = *(reinterpret_cast< X509CertificatePtr * >(argp1));
    }
  }
  {
    try 
    {
      result = (CountPtrTo<Key > *)new_CountPtrTo_Sl_Key_Sg___SWIG_2(arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Key_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Key_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CountPtrToTKey_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Key__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector<X509CertificatePtr > arg1 ;
  CountPtrTo<Key > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
      unsigned int size = RARRAY_LEN(argv[0]);
      arg1;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(argv[0])[i];
        CountPtrTo<X509Certificate >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTX509Certificate_t, 1);
        (&arg1)->push_back(*x);
      }
    } else {
      void *ptr;
      SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 1);
      arg1 = *((std::vector<X509CertificatePtr > *) ptr);
    }
  }
  {
    try 
    {
      result = (CountPtrTo<Key > *)new_CountPtrTo_Sl_Key_Sg___SWIG_3(arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Key(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Key__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTKey_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Key__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTX509Certificate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Key__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      /* native sequence? */
      if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
        unsigned int size = RARRAY_LEN(argv[0]);
        if (size == 0) {
          /* an empty sequence can be of any type */
          _v = 1;
        } else {
          /* check the first element only */
          CountPtrTo<X509Certificate >* x;
          VALUE o = RARRAY_PTR(argv[0])[0];
          if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_CountPtrToTX509Certificate_t,0)) != -1)
          _v = 1;
          else
          _v = 0;
        }
      } else {
        /* wrapped vector? */
        std::vector<CountPtrTo<X509Certificate > >* v;
        if (SWIG_ConvertPtr(argv[0],(void **) &v, 
            SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t,0) != -1)
        _v = 1;
        else
        _v = 0;
      }
    }
    if (_v) {
      return _wrap_new_Key__SWIG_3(nargs, args, self);
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Key'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Key_loadFromFile(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<Key > *arg1 = (CountPtrTo<Key > *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKey_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadFromFile" "', argument " "1"" of type '" "CountPtrTo<Key > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<Key > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->loadFromFile(arg2,arg3,arg4);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Key_loadFromKeyInfoFile(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<Key > *arg1 = (CountPtrTo<Key > *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKey_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadFromKeyInfoFile" "', argument " "1"" of type '" "CountPtrTo<Key > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<Key > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromKeyInfoFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->loadFromKeyInfoFile(arg2);
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XMLError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XMLError, SWIG_NewPointerObj((new XMLError(static_cast< const XMLError& >(_e))),SWIGTYPE_p_XMLError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Key_loadHMACFromString(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<Key > *arg1 = (CountPtrTo<Key > *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKey_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadHMACFromString" "', argument " "1"" of type '" "CountPtrTo<Key > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<Key > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadHMACFromString" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->loadHMACFromString(arg2);
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Key_setName(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<Key > *arg1 = (CountPtrTo<Key > *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKey_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setName" "', argument " "1"" of type '" "CountPtrTo<Key > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<Key > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "setName" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->setName(arg2);
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Key_getName(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<Key > *arg1 = (CountPtrTo<Key > *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKey_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getName" "', argument " "1"" of type '" "CountPtrTo<Key > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<Key > * >(argp1);
  {
    try 
    {
      result = (*arg1)->getName(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Key_isValid(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<Key > *arg1 = (CountPtrTo<Key > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKey_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isValid" "', argument " "1"" of type '" "CountPtrTo<Key > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<Key > * >(argp1);
  {
    try 
    {
      result = (int)(*arg1)->isValid(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Key_getCertificate(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<Key > *arg1 = (CountPtrTo<Key > *) 0 ;
  SwigValueWrapper<CountPtrTo<X509Certificate > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKey_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCertificate" "', argument " "1"" of type '" "CountPtrTo<Key > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<Key > * >(argp1);
  {
    try 
    {
      try {
        result = (*arg1)->getCertificate();
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new X509CertificatePtr(static_cast< const X509CertificatePtr& >(result))), SWIGTYPE_p_CountPtrToTX509Certificate_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Key_getCertificateChain(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<Key > *arg1 = (CountPtrTo<Key > *) 0 ;
  SwigValueWrapper<vector<CountPtrTo<X509Certificate > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKey_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCertificateChain" "', argument " "1"" of type '" "CountPtrTo<Key > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<Key > * >(argp1);
  {
    try 
    {
      result = (*arg1)->getCertificateChain(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new vector<X509CertificatePtr >(static_cast< const vector<X509CertificatePtr >& >(result))), SWIGTYPE_p_vectorTCountPtrToTX509Certificate_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Key_dump(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<Key > *arg1 = (CountPtrTo<Key > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKey_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dump" "', argument " "1"" of type '" "CountPtrTo<Key > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<Key > * >(argp1);
  {
    try 
    {
      (*arg1)->dump(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


swig_class cKeyVector;

SWIGINTERN VALUE
_wrap_new_KeyVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector<KeyPtr > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (std::vector<KeyPtr > *)new std::vector<KeyPtr >();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_KeyVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  unsigned int arg1 ;
  std::vector<KeyPtr > *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "std::vector<(KeyPtr)>" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try 
    {
      result = (std::vector<KeyPtr > *)new std::vector<KeyPtr >(arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_KeyVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  unsigned int arg1 ;
  CountPtrTo<Key > *arg2 = 0 ;
  std::vector<KeyPtr > *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "std::vector<(KeyPtr)>" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CountPtrToTKey_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "std::vector<(KeyPtr)>" "', argument " "2"" of type '" "CountPtrTo<Key > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "std::vector<(KeyPtr)>" "', argument " "2"" of type '" "CountPtrTo<Key > const &""'"); 
  }
  arg2 = reinterpret_cast< CountPtrTo<Key > * >(argp2);
  {
    try 
    {
      result = (std::vector<KeyPtr > *)new std::vector<KeyPtr >(arg1,(CountPtrTo<Key > const &)*arg2);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_KeyVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_KeyVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_KeyVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector<CountPtrTo<Key > > *arg1 = 0 ;
  std::vector<KeyPtr > *result = 0 ;
  std::vector<CountPtrTo<Key > > temp1 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
      unsigned int size = RARRAY_LEN(argv[0]);
      arg1 = &temp1;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(argv[0])[i];
        CountPtrTo<Key >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTKey_t, 1);
        temp1.push_back(*x);
      }
    } else {
      SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t, 1);
    }
  }
  {
    try 
    {
      result = (std::vector<KeyPtr > *)new std::vector<KeyPtr >((std::vector<CountPtrTo<Key > > const &)*arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_KeyVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_KeyVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_KeyVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      /* native sequence? */
      if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
        unsigned int size = RARRAY_LEN(argv[0]);
        if (size == 0) {
          /* an empty sequence can be of any type */
          _v = 1;
        } else {
          /* check the first element only */
          CountPtrTo<Key >* x;
          VALUE o = RARRAY_PTR(argv[0])[0];
          if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_CountPtrToTKey_t,0)) != -1)
          _v = 1;
          else
          _v = 0;
        }
      } else {
        /* wrapped vector? */
        std::vector<CountPtrTo<Key > >* v;
        if (SWIG_ConvertPtr(argv[0],(void **) &v, 
            SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t,0) != -1)
        _v = 1;
        else
        _v = 0;
      }
    }
    if (_v) {
      return _wrap_new_KeyVector__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTKey_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_KeyVector__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_KeyVector'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyVector___len__(int argc, VALUE *argv, VALUE self) {
  std::vector<KeyPtr > *arg1 = (std::vector<KeyPtr > *) 0 ;
  unsigned int result;
  std::vector<CountPtrTo<Key > > temp1 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    if (rb_obj_is_kind_of(self,rb_cArray)) {
      unsigned int size = RARRAY_LEN(self);
      arg1 = &temp1;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(self)[i];
        CountPtrTo<Key >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTKey_t, 1);
        temp1.push_back(*x);
      }
    } else {
      SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t, 1);
    }
  }
  {
    try 
    {
      result = (unsigned int)((std::vector<KeyPtr > const *)arg1)->size(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector<KeyPtr > *arg1 = (std::vector<KeyPtr > *) 0 ;
  bool result;
  std::vector<CountPtrTo<Key > > temp1 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    if (rb_obj_is_kind_of(self,rb_cArray)) {
      unsigned int size = RARRAY_LEN(self);
      arg1 = &temp1;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(self)[i];
        CountPtrTo<Key >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTKey_t, 1);
        temp1.push_back(*x);
      }
    } else {
      SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t, 1);
    }
  }
  {
    try 
    {
      result = (bool)((std::vector<KeyPtr > const *)arg1)->empty(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector<KeyPtr > *arg1 = (std::vector<KeyPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "std::vector<KeyPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<KeyPtr > * >(argp1);
  {
    try 
    {
      (arg1)->clear(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector<KeyPtr > *arg1 = (std::vector<KeyPtr > *) 0 ;
  CountPtrTo<Key > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "push_back" "', argument " "1"" of type '" "std::vector<KeyPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<KeyPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTKey_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "push_back" "', argument " "2"" of type '" "CountPtrTo<Key > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "push_back" "', argument " "2"" of type '" "CountPtrTo<Key > const &""'"); 
  }
  arg2 = reinterpret_cast< CountPtrTo<Key > * >(argp2);
  {
    try 
    {
      (arg1)->push_back((CountPtrTo<Key > const &)*arg2); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector<KeyPtr > *arg1 = (std::vector<KeyPtr > *) 0 ;
  SwigValueWrapper<CountPtrTo<Key > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pop" "', argument " "1"" of type '" "std::vector<KeyPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<KeyPtr > * >(argp1);
  {
    try 
    {
      try {
        result = std_vector_Sl_KeyPtr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_std__out_of_range, SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new CountPtrTo<Key >(static_cast< const CountPtrTo<Key >& >(result))), SWIGTYPE_p_CountPtrToTKey_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyVector___getitem__(int argc, VALUE *argv, VALUE self) {
  std::vector<KeyPtr > *arg1 = (std::vector<KeyPtr > *) 0 ;
  int arg2 ;
  CountPtrTo<Key > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "std::vector<KeyPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<KeyPtr > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try 
    {
      try {
        {
          CountPtrTo<Key > &_result_ref = std_vector_Sl_KeyPtr_Sg____getitem__(arg1,arg2);
          result = (CountPtrTo<Key > *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_std__out_of_range, SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CountPtrToTKey_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyVector___setitem__(int argc, VALUE *argv, VALUE self) {
  std::vector<KeyPtr > *arg1 = (std::vector<KeyPtr > *) 0 ;
  int arg2 ;
  CountPtrTo<Key > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "std::vector<KeyPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<KeyPtr > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CountPtrToTKey_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "__setitem__" "', argument " "3"" of type '" "CountPtrTo<Key > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__setitem__" "', argument " "3"" of type '" "CountPtrTo<Key > const &""'"); 
  }
  arg3 = reinterpret_cast< CountPtrTo<Key > * >(argp3);
  {
    try 
    {
      try {
        std_vector_Sl_KeyPtr_Sg____setitem__(arg1,arg2,(CountPtrTo<Key > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_std__out_of_range, SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector<KeyPtr > *arg1 = (std::vector<KeyPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "each" "', argument " "1"" of type '" "std::vector<KeyPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<KeyPtr > * >(argp1);
  {
    try 
    {
      std_vector_Sl_KeyPtr_Sg__each(arg1); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_KeyPtr_Sg_(std::vector<KeyPtr > *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cKeyStoreBase;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_KeyStoreBase_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_KeyStoreBase_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_KeyStore);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_KeyStoreBase(int argc, VALUE *argv, VALUE self) {
  KeyStore *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      try {
        result = (KeyStore *)new KeyStore();DATA_PTR(self) = result;
        SWIG_RubyAddTracking(result, self);
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_KeyStore(KeyStore *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_KeyStoreBase_addTrustedCert(int argc, VALUE *argv, VALUE self) {
  KeyStore *arg1 = (KeyStore *) 0 ;
  SwigValueWrapper<CountPtrTo<X509Certificate > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_KeyStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addTrustedCert" "', argument " "1"" of type '" "KeyStore *""'"); 
  }
  arg1 = reinterpret_cast< KeyStore * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTX509Certificate_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addTrustedCert" "', argument " "2"" of type '" "X509CertificatePtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addTrustedCert" "', argument " "2"" of type '" "X509CertificatePtr""'");
    } else {
      arg2 = *(reinterpret_cast< X509CertificatePtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->addTrustedCert(arg2);
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStoreBase_addUntrustedCert(int argc, VALUE *argv, VALUE self) {
  KeyStore *arg1 = (KeyStore *) 0 ;
  SwigValueWrapper<CountPtrTo<X509Certificate > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_KeyStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addUntrustedCert" "', argument " "1"" of type '" "KeyStore *""'"); 
  }
  arg1 = reinterpret_cast< KeyStore * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTX509Certificate_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addUntrustedCert" "', argument " "2"" of type '" "X509CertificatePtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addUntrustedCert" "', argument " "2"" of type '" "X509CertificatePtr""'");
    } else {
      arg2 = *(reinterpret_cast< X509CertificatePtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->addUntrustedCert(arg2);
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStoreBase_addTrustedCertFromFile(int argc, VALUE *argv, VALUE self) {
  KeyStore *arg1 = (KeyStore *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_KeyStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addTrustedCertFromFile" "', argument " "1"" of type '" "KeyStore *""'"); 
  }
  arg1 = reinterpret_cast< KeyStore * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addTrustedCertFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addTrustedCertFromFile" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->addTrustedCertFromFile(arg2,arg3);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStoreBase_addUntrustedCertFromFile(int argc, VALUE *argv, VALUE self) {
  KeyStore *arg1 = (KeyStore *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_KeyStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addUntrustedCertFromFile" "', argument " "1"" of type '" "KeyStore *""'"); 
  }
  arg1 = reinterpret_cast< KeyStore * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addUntrustedCertFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addUntrustedCertFromFile" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->addUntrustedCertFromFile(arg2,arg3);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStoreBase_addKey(int argc, VALUE *argv, VALUE self) {
  KeyStore *arg1 = (KeyStore *) 0 ;
  SwigValueWrapper<CountPtrTo<Key > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_KeyStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addKey" "', argument " "1"" of type '" "KeyStore *""'"); 
  }
  arg1 = reinterpret_cast< KeyStore * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTKey_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addKey" "', argument " "2"" of type '" "KeyPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addKey" "', argument " "2"" of type '" "KeyPtr""'");
    } else {
      arg2 = *(reinterpret_cast< KeyPtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->addKey(arg2);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStoreBase_addKeyFromFile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  KeyStore *arg1 = (KeyStore *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_KeyStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addKeyFromFile" "', argument " "1"" of type '" "KeyStore *""'"); 
  }
  arg1 = reinterpret_cast< KeyStore * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->addKeyFromFile(arg2,arg3,arg4);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStoreBase_addKeyFromFile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  KeyStore *arg1 = (KeyStore *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_KeyStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addKeyFromFile" "', argument " "1"" of type '" "KeyStore *""'"); 
  }
  arg1 = reinterpret_cast< KeyStore * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->addKeyFromFile(arg2,arg3,arg4,arg5);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_KeyStoreBase_addKeyFromFile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_KeyStore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_KeyStoreBase_addKeyFromFile__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_KeyStore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_KeyStoreBase_addKeyFromFile__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'KeyStoreBase_addKeyFromFile'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStoreBase_saveToFile(int argc, VALUE *argv, VALUE self) {
  KeyStore *arg1 = (KeyStore *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_KeyStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "saveToFile" "', argument " "1"" of type '" "KeyStore *""'"); 
  }
  arg1 = reinterpret_cast< KeyStore * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "saveToFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->saveToFile(arg2);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStoreBase_loadFromFile(int argc, VALUE *argv, VALUE self) {
  KeyStore *arg1 = (KeyStore *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_KeyStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadFromFile" "', argument " "1"" of type '" "KeyStore *""'"); 
  }
  arg1 = reinterpret_cast< KeyStore * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->loadFromFile(arg2);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cKeyStore;

SWIGINTERN void
free_CountPtrTo_Sl_KeyStore_Sg_(CountPtrTo<KeyStore > *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_KeyStore___deref__(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<KeyStore > *arg1 = (CountPtrTo<KeyStore > *) 0 ;
  KeyStore *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKeyStore_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator ->" "', argument " "1"" of type '" "CountPtrTo<KeyStore > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<KeyStore > * >(argp1);
  {
    try 
    {
      result = (KeyStore *)(arg1)->operator ->(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_KeyStore, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_KeyStore_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_KeyStore_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CountPtrToTKeyStore_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_KeyStore(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<KeyStore > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (CountPtrTo<KeyStore > *)new_CountPtrTo_Sl_KeyStore_Sg_();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStore_addTrustedCert(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<KeyStore > *arg1 = (CountPtrTo<KeyStore > *) 0 ;
  SwigValueWrapper<CountPtrTo<X509Certificate > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKeyStore_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addTrustedCert" "', argument " "1"" of type '" "CountPtrTo<KeyStore > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<KeyStore > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTX509Certificate_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addTrustedCert" "', argument " "2"" of type '" "X509CertificatePtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addTrustedCert" "', argument " "2"" of type '" "X509CertificatePtr""'");
    } else {
      arg2 = *(reinterpret_cast< X509CertificatePtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->addTrustedCert(arg2);
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStore_addUntrustedCert(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<KeyStore > *arg1 = (CountPtrTo<KeyStore > *) 0 ;
  SwigValueWrapper<CountPtrTo<X509Certificate > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKeyStore_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addUntrustedCert" "', argument " "1"" of type '" "CountPtrTo<KeyStore > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<KeyStore > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTX509Certificate_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addUntrustedCert" "', argument " "2"" of type '" "X509CertificatePtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addUntrustedCert" "', argument " "2"" of type '" "X509CertificatePtr""'");
    } else {
      arg2 = *(reinterpret_cast< X509CertificatePtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->addUntrustedCert(arg2);
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStore_addTrustedCertFromFile(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<KeyStore > *arg1 = (CountPtrTo<KeyStore > *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKeyStore_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addTrustedCertFromFile" "', argument " "1"" of type '" "CountPtrTo<KeyStore > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<KeyStore > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addTrustedCertFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addTrustedCertFromFile" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->addTrustedCertFromFile(arg2,arg3);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStore_addUntrustedCertFromFile(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<KeyStore > *arg1 = (CountPtrTo<KeyStore > *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKeyStore_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addUntrustedCertFromFile" "', argument " "1"" of type '" "CountPtrTo<KeyStore > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<KeyStore > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addUntrustedCertFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addUntrustedCertFromFile" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->addUntrustedCertFromFile(arg2,arg3);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStore_addKey(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<KeyStore > *arg1 = (CountPtrTo<KeyStore > *) 0 ;
  SwigValueWrapper<CountPtrTo<Key > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKeyStore_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addKey" "', argument " "1"" of type '" "CountPtrTo<KeyStore > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<KeyStore > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTKey_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addKey" "', argument " "2"" of type '" "KeyPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addKey" "', argument " "2"" of type '" "KeyPtr""'");
    } else {
      arg2 = *(reinterpret_cast< KeyPtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->addKey(arg2);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStore_addKeyFromFile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<KeyStore > *arg1 = (CountPtrTo<KeyStore > *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKeyStore_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addKeyFromFile" "', argument " "1"" of type '" "CountPtrTo<KeyStore > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<KeyStore > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->addKeyFromFile(arg2,arg3,arg4);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStore_addKeyFromFile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<KeyStore > *arg1 = (CountPtrTo<KeyStore > *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKeyStore_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addKeyFromFile" "', argument " "1"" of type '" "CountPtrTo<KeyStore > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<KeyStore > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addKeyFromFile" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->addKeyFromFile(arg2,arg3,arg4,arg5);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_KeyStore_addKeyFromFile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTKeyStore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_KeyStore_addKeyFromFile__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTKeyStore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_KeyStore_addKeyFromFile__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'KeyStore_addKeyFromFile'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStore_saveToFile(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<KeyStore > *arg1 = (CountPtrTo<KeyStore > *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKeyStore_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "saveToFile" "', argument " "1"" of type '" "CountPtrTo<KeyStore > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<KeyStore > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "saveToFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->saveToFile(arg2);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyStore_loadFromFile(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<KeyStore > *arg1 = (CountPtrTo<KeyStore > *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTKeyStore_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadFromFile" "', argument " "1"" of type '" "CountPtrTo<KeyStore > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<KeyStore > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->loadFromFile(arg2);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cXmlDocBase;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlDocBase_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlDocBase_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlDoc);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XmlDocBase(int argc, VALUE *argv, VALUE self) {
  XmlDoc *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (XmlDoc *)new XmlDoc();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_XmlDoc(XmlDoc *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlDocBase_loadFromString(int argc, VALUE *argv, VALUE self) {
  XmlDoc *arg1 = (XmlDoc *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDoc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadFromString" "', argument " "1"" of type '" "XmlDoc *""'"); 
  }
  arg1 = reinterpret_cast< XmlDoc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromString" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->loadFromString(arg2);
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocBase_loadFromFile(int argc, VALUE *argv, VALUE self) {
  XmlDoc *arg1 = (XmlDoc *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDoc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadFromFile" "', argument " "1"" of type '" "XmlDoc *""'"); 
  }
  arg1 = reinterpret_cast< XmlDoc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->loadFromFile(arg2);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocBase_toString(int argc, VALUE *argv, VALUE self) {
  XmlDoc *arg1 = (XmlDoc *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDoc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "toString" "', argument " "1"" of type '" "XmlDoc *""'"); 
  }
  arg1 = reinterpret_cast< XmlDoc * >(argp1);
  {
    try 
    {
      result = (arg1)->toString(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocBase_toFile(int argc, VALUE *argv, VALUE self) {
  XmlDoc *arg1 = (XmlDoc *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDoc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "toFile" "', argument " "1"" of type '" "XmlDoc *""'"); 
  }
  arg1 = reinterpret_cast< XmlDoc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "toFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->toFile(arg2);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocBase_dump(int argc, VALUE *argv, VALUE self) {
  XmlDoc *arg1 = (XmlDoc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDoc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dump" "', argument " "1"" of type '" "XmlDoc *""'"); 
  }
  arg1 = reinterpret_cast< XmlDoc * >(argp1);
  {
    try 
    {
      (arg1)->dump(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocBase_addIdAttr(int argc, VALUE *argv, VALUE self) {
  XmlDoc *arg1 = (XmlDoc *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDoc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addIdAttr" "', argument " "1"" of type '" "XmlDoc *""'"); 
  }
  arg1 = reinterpret_cast< XmlDoc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addIdAttr" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addIdAttr" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addIdAttr" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->addIdAttr(arg2,arg3,arg4);
      }
      catch(ValueError &_e) {
        SWIG_exception(SWIG_ValueError, (&_e)->what());
        
      }
      catch(XMLError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XMLError, SWIG_NewPointerObj((new XMLError(static_cast< const XMLError& >(_e))),SWIGTYPE_p_XMLError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cXmlDoc;

SWIGINTERN void
free_CountPtrTo_Sl_XmlDoc_Sg_(CountPtrTo<XmlDoc > *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlDoc___deref__(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlDoc > *arg1 = (CountPtrTo<XmlDoc > *) 0 ;
  XmlDoc *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXmlDoc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator ->" "', argument " "1"" of type '" "CountPtrTo<XmlDoc > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlDoc > * >(argp1);
  {
    try 
    {
      result = (XmlDoc *)(arg1)->operator ->(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlDoc, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XmlDoc__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlDoc > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (CountPtrTo<XmlDoc > *)new_CountPtrTo_Sl_XmlDoc_Sg___SWIG_0();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlDoc_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlDoc_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CountPtrToTXmlDoc_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XmlDoc__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlDoc > *arg1 = 0 ;
  CountPtrTo<XmlDoc > *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CountPtrToTXmlDoc_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CountPtrTo<(XmlDoc)>" "', argument " "1"" of type '" "CountPtrTo<XmlDoc > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CountPtrTo<(XmlDoc)>" "', argument " "1"" of type '" "CountPtrTo<XmlDoc > const &""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlDoc > * >(argp1);
  {
    try 
    {
      result = (CountPtrTo<XmlDoc > *)new_CountPtrTo_Sl_XmlDoc_Sg___SWIG_1((CountPtrTo<XmlDoc > const &)*arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlDoc(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XmlDoc__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTXmlDoc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlDoc__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlDoc'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDoc_loadFromString(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlDoc > *arg1 = (CountPtrTo<XmlDoc > *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXmlDoc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadFromString" "', argument " "1"" of type '" "CountPtrTo<XmlDoc > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlDoc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromString" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->loadFromString(arg2);
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDoc_loadFromFile(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlDoc > *arg1 = (CountPtrTo<XmlDoc > *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXmlDoc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadFromFile" "', argument " "1"" of type '" "CountPtrTo<XmlDoc > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlDoc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "loadFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->loadFromFile(arg2);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDoc_toString(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlDoc > *arg1 = (CountPtrTo<XmlDoc > *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXmlDoc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "toString" "', argument " "1"" of type '" "CountPtrTo<XmlDoc > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlDoc > * >(argp1);
  {
    try 
    {
      result = (*arg1)->toString(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDoc_toFile(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlDoc > *arg1 = (CountPtrTo<XmlDoc > *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXmlDoc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "toFile" "', argument " "1"" of type '" "CountPtrTo<XmlDoc > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlDoc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "toFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->toFile(arg2);
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDoc_dump(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlDoc > *arg1 = (CountPtrTo<XmlDoc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXmlDoc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dump" "', argument " "1"" of type '" "CountPtrTo<XmlDoc > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlDoc > * >(argp1);
  {
    try 
    {
      (*arg1)->dump(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDoc_addIdAttr(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlDoc > *arg1 = (CountPtrTo<XmlDoc > *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXmlDoc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addIdAttr" "', argument " "1"" of type '" "CountPtrTo<XmlDoc > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlDoc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addIdAttr" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addIdAttr" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addIdAttr" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(*arg1)->addIdAttr(arg2,arg3,arg4);
      }
      catch(ValueError &_e) {
        SWIG_exception(SWIG_ValueError, (&_e)->what());
        
      }
      catch(XMLError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XMLError, SWIG_NewPointerObj((new XMLError(static_cast< const XMLError& >(_e))),SWIGTYPE_p_XMLError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cXPathBase;

SWIGINTERN VALUE
_wrap_new_XPathBase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XPath *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (XPath *)new XPath();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XPathBase_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XPathBase_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XPath);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XPathBase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  XPath *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "XPath" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      result = (XPath *)new XPath(arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XPathBase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XPathBase__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XPathBase__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XPathBase'");
  return Qnil;
}


SWIGINTERN void
free_XPath(XPath *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XPathBase_addNamespace(int argc, VALUE *argv, VALUE self) {
  XPath *arg1 = (XPath *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addNamespace" "', argument " "1"" of type '" "XPath *""'"); 
  }
  arg1 = reinterpret_cast< XPath * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addNamespace" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addNamespace" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      result = (int)(arg1)->addNamespace(arg2,arg3); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathBase_getXPath(int argc, VALUE *argv, VALUE self) {
  XPath *arg1 = (XPath *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getXPath" "', argument " "1"" of type '" "XPath *""'"); 
  }
  arg1 = reinterpret_cast< XPath * >(argp1);
  {
    try 
    {
      result = (arg1)->getXPath(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathBase_setXPath(int argc, VALUE *argv, VALUE self) {
  XPath *arg1 = (XPath *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XPath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setXPath" "', argument " "1"" of type '" "XPath *""'"); 
  }
  arg1 = reinterpret_cast< XPath * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "setXPath" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      (arg1)->setXPath(arg2); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


swig_class cXPath;

SWIGINTERN void
free_CountPtrTo_Sl_XPath_Sg_(CountPtrTo<XPath > *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XPath___deref__(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XPath > *arg1 = (CountPtrTo<XPath > *) 0 ;
  XPath *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXPath_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator ->" "', argument " "1"" of type '" "CountPtrTo<XPath > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XPath > * >(argp1);
  {
    try 
    {
      result = (XPath *)(arg1)->operator ->(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XPath, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XPath__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XPath > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (CountPtrTo<XPath > *)new_CountPtrTo_Sl_XPath_Sg___SWIG_0();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XPath__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XPath > *arg1 = 0 ;
  CountPtrTo<XPath > *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CountPtrToTXPath_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CountPtrTo<(XPath)>" "', argument " "1"" of type '" "CountPtrTo<XPath > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CountPtrTo<(XPath)>" "', argument " "1"" of type '" "CountPtrTo<XPath > const &""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XPath > * >(argp1);
  {
    try 
    {
      result = (CountPtrTo<XPath > *)new_CountPtrTo_Sl_XPath_Sg___SWIG_1((CountPtrTo<XPath > const &)*arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XPath_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XPath_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CountPtrToTXPath_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XPath__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  CountPtrTo<XPath > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CountPtrTo<(XPath)>" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      result = (CountPtrTo<XPath > *)new_CountPtrTo_Sl_XPath_Sg___SWIG_2(arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XPath(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XPath__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTXPath_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XPath__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XPath__SWIG_2(nargs, args, self);
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XPath'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPath_addNamespace(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XPath > *arg1 = (CountPtrTo<XPath > *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXPath_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addNamespace" "', argument " "1"" of type '" "CountPtrTo<XPath > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XPath > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addNamespace" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addNamespace" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      result = (int)(*arg1)->addNamespace(arg2,arg3); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPath_getXPath(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XPath > *arg1 = (CountPtrTo<XPath > *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXPath_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getXPath" "', argument " "1"" of type '" "CountPtrTo<XPath > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XPath > * >(argp1);
  {
    try 
    {
      result = (*arg1)->getXPath(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPath_setXPath(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XPath > *arg1 = (CountPtrTo<XPath > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXPath_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setXPath" "', argument " "1"" of type '" "CountPtrTo<XPath > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XPath > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "setXPath" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      (*arg1)->setXPath(arg2); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


swig_class cXmlElementBase;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlElementBase_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlElementBase_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlElement);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XmlElementBase(int argc, VALUE *argv, VALUE self) {
  XmlElement *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (XmlElement *)new XmlElement();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_XmlElement(XmlElement *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlElementBase_getNode(int argc, VALUE *argv, VALUE self) {
  XmlElement *arg1 = (XmlElement *) 0 ;
  xmlNodePtr result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNode" "', argument " "1"" of type '" "XmlElement *""'"); 
  }
  arg1 = reinterpret_cast< XmlElement * >(argp1);
  {
    try 
    {
      result = (arg1)->getNode(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new xmlNodePtr(static_cast< const xmlNodePtr& >(result))), SWIGTYPE_p_xmlNodePtr, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElementBase_getTagName(int argc, VALUE *argv, VALUE self) {
  XmlElement *arg1 = (XmlElement *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getTagName" "', argument " "1"" of type '" "XmlElement *""'"); 
  }
  arg1 = reinterpret_cast< XmlElement * >(argp1);
  {
    try 
    {
      result = (arg1)->getTagName(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElementBase_getAttribute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlElement *arg1 = (XmlElement *) 0 ;
  std::string arg2 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAttribute" "', argument " "1"" of type '" "XmlElement *""'"); 
  }
  arg1 = reinterpret_cast< XmlElement * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      result = (arg1)->getAttribute(arg2); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElementBase_getAttribute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlElement *arg1 = (XmlElement *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAttribute" "', argument " "1"" of type '" "XmlElement *""'"); 
  }
  arg1 = reinterpret_cast< XmlElement * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getAttribute" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      result = (arg1)->getAttribute(arg2,arg3); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlElementBase_getAttribute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlElement, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlElementBase_getAttribute__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlElement, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlElementBase_getAttribute__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlElementBase_getAttribute'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElementBase_getNodePath(int argc, VALUE *argv, VALUE self) {
  XmlElement *arg1 = (XmlElement *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNodePath" "', argument " "1"" of type '" "XmlElement *""'"); 
  }
  arg1 = reinterpret_cast< XmlElement * >(argp1);
  {
    try 
    {
      result = (arg1)->getNodePath(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cXmlElement;

SWIGINTERN void
free_CountPtrTo_Sl_XmlElement_Sg_(CountPtrTo<XmlElement > *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlElement___deref__(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlElement > *arg1 = (CountPtrTo<XmlElement > *) 0 ;
  XmlElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXmlElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator ->" "', argument " "1"" of type '" "CountPtrTo<XmlElement > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlElement > * >(argp1);
  {
    try 
    {
      result = (XmlElement *)(arg1)->operator ->(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlElement, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlElement_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlElement_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CountPtrToTXmlElement_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XmlElement(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlElement > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (CountPtrTo<XmlElement > *)new_CountPtrTo_Sl_XmlElement_Sg_();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElement_getNode(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlElement > *arg1 = (CountPtrTo<XmlElement > *) 0 ;
  xmlNodePtr result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXmlElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNode" "', argument " "1"" of type '" "CountPtrTo<XmlElement > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlElement > * >(argp1);
  {
    try 
    {
      result = (*arg1)->getNode(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new xmlNodePtr(static_cast< const xmlNodePtr& >(result))), SWIGTYPE_p_xmlNodePtr, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElement_getTagName(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlElement > *arg1 = (CountPtrTo<XmlElement > *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXmlElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getTagName" "', argument " "1"" of type '" "CountPtrTo<XmlElement > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlElement > * >(argp1);
  {
    try 
    {
      result = (*arg1)->getTagName(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElement_getAttribute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlElement > *arg1 = (CountPtrTo<XmlElement > *) 0 ;
  std::string arg2 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXmlElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAttribute" "', argument " "1"" of type '" "CountPtrTo<XmlElement > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlElement > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      result = (*arg1)->getAttribute(arg2); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElement_getAttribute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlElement > *arg1 = (CountPtrTo<XmlElement > *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXmlElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAttribute" "', argument " "1"" of type '" "CountPtrTo<XmlElement > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlElement > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getAttribute" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      result = (*arg1)->getAttribute(arg2,arg3); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlElement_getAttribute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTXmlElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlElement_getAttribute__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTXmlElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlElement_getAttribute__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlElement_getAttribute'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElement_getNodePath(int argc, VALUE *argv, VALUE self) {
  CountPtrTo<XmlElement > *arg1 = (CountPtrTo<XmlElement > *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CountPtrToTXmlElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNodePath" "', argument " "1"" of type '" "CountPtrTo<XmlElement > *""'"); 
  }
  arg1 = reinterpret_cast< CountPtrTo<XmlElement > * >(argp1);
  {
    try 
    {
      result = (*arg1)->getNodePath(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cXmlElementVector;

SWIGINTERN VALUE
_wrap_new_XmlElementVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector<XmlElementPtr > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (std::vector<XmlElementPtr > *)new std::vector<XmlElementPtr >();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XmlElementVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  unsigned int arg1 ;
  std::vector<XmlElementPtr > *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "std::vector<(XmlElementPtr)>" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try 
    {
      result = (std::vector<XmlElementPtr > *)new std::vector<XmlElementPtr >(arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XmlElementVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  unsigned int arg1 ;
  CountPtrTo<XmlElement > *arg2 = 0 ;
  std::vector<XmlElementPtr > *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "std::vector<(XmlElementPtr)>" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CountPtrToTXmlElement_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "std::vector<(XmlElementPtr)>" "', argument " "2"" of type '" "CountPtrTo<XmlElement > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "std::vector<(XmlElementPtr)>" "', argument " "2"" of type '" "CountPtrTo<XmlElement > const &""'"); 
  }
  arg2 = reinterpret_cast< CountPtrTo<XmlElement > * >(argp2);
  {
    try 
    {
      result = (std::vector<XmlElementPtr > *)new std::vector<XmlElementPtr >(arg1,(CountPtrTo<XmlElement > const &)*arg2);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlElementVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlElementVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorTCountPtrToTXmlElement_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XmlElementVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector<CountPtrTo<XmlElement > > *arg1 = 0 ;
  std::vector<XmlElementPtr > *result = 0 ;
  std::vector<CountPtrTo<XmlElement > > temp1 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
      unsigned int size = RARRAY_LEN(argv[0]);
      arg1 = &temp1;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(argv[0])[i];
        CountPtrTo<XmlElement >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTXmlElement_t, 1);
        temp1.push_back(*x);
      }
    } else {
      SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_std__vectorTCountPtrToTXmlElement_t_t, 1);
    }
  }
  {
    try 
    {
      result = (std::vector<XmlElementPtr > *)new std::vector<XmlElementPtr >((std::vector<CountPtrTo<XmlElement > > const &)*arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlElementVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XmlElementVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_XmlElementVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      /* native sequence? */
      if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
        unsigned int size = RARRAY_LEN(argv[0]);
        if (size == 0) {
          /* an empty sequence can be of any type */
          _v = 1;
        } else {
          /* check the first element only */
          CountPtrTo<XmlElement >* x;
          VALUE o = RARRAY_PTR(argv[0])[0];
          if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_CountPtrToTXmlElement_t,0)) != -1)
          _v = 1;
          else
          _v = 0;
        }
      } else {
        /* wrapped vector? */
        std::vector<CountPtrTo<XmlElement > >* v;
        if (SWIG_ConvertPtr(argv[0],(void **) &v, 
            SWIGTYPE_p_std__vectorTCountPtrToTXmlElement_t_t,0) != -1)
        _v = 1;
        else
        _v = 0;
      }
    }
    if (_v) {
      return _wrap_new_XmlElementVector__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTXmlElement_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_XmlElementVector__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlElementVector'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElementVector___len__(int argc, VALUE *argv, VALUE self) {
  std::vector<XmlElementPtr > *arg1 = (std::vector<XmlElementPtr > *) 0 ;
  unsigned int result;
  std::vector<CountPtrTo<XmlElement > > temp1 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    if (rb_obj_is_kind_of(self,rb_cArray)) {
      unsigned int size = RARRAY_LEN(self);
      arg1 = &temp1;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(self)[i];
        CountPtrTo<XmlElement >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTXmlElement_t, 1);
        temp1.push_back(*x);
      }
    } else {
      SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_std__vectorTCountPtrToTXmlElement_t_t, 1);
    }
  }
  {
    try 
    {
      result = (unsigned int)((std::vector<XmlElementPtr > const *)arg1)->size(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElementVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector<XmlElementPtr > *arg1 = (std::vector<XmlElementPtr > *) 0 ;
  bool result;
  std::vector<CountPtrTo<XmlElement > > temp1 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    if (rb_obj_is_kind_of(self,rb_cArray)) {
      unsigned int size = RARRAY_LEN(self);
      arg1 = &temp1;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(self)[i];
        CountPtrTo<XmlElement >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTXmlElement_t, 1);
        temp1.push_back(*x);
      }
    } else {
      SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_std__vectorTCountPtrToTXmlElement_t_t, 1);
    }
  }
  {
    try 
    {
      result = (bool)((std::vector<XmlElementPtr > const *)arg1)->empty(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElementVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector<XmlElementPtr > *arg1 = (std::vector<XmlElementPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTXmlElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "std::vector<XmlElementPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<XmlElementPtr > * >(argp1);
  {
    try 
    {
      (arg1)->clear(); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElementVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector<XmlElementPtr > *arg1 = (std::vector<XmlElementPtr > *) 0 ;
  CountPtrTo<XmlElement > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTXmlElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "push_back" "', argument " "1"" of type '" "std::vector<XmlElementPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<XmlElementPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTXmlElement_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "push_back" "', argument " "2"" of type '" "CountPtrTo<XmlElement > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "push_back" "', argument " "2"" of type '" "CountPtrTo<XmlElement > const &""'"); 
  }
  arg2 = reinterpret_cast< CountPtrTo<XmlElement > * >(argp2);
  {
    try 
    {
      (arg1)->push_back((CountPtrTo<XmlElement > const &)*arg2); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElementVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector<XmlElementPtr > *arg1 = (std::vector<XmlElementPtr > *) 0 ;
  SwigValueWrapper<CountPtrTo<XmlElement > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTXmlElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pop" "', argument " "1"" of type '" "std::vector<XmlElementPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<XmlElementPtr > * >(argp1);
  {
    try 
    {
      try {
        result = std_vector_Sl_XmlElementPtr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_std__out_of_range, SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new CountPtrTo<XmlElement >(static_cast< const CountPtrTo<XmlElement >& >(result))), SWIGTYPE_p_CountPtrToTXmlElement_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElementVector___getitem__(int argc, VALUE *argv, VALUE self) {
  std::vector<XmlElementPtr > *arg1 = (std::vector<XmlElementPtr > *) 0 ;
  int arg2 ;
  CountPtrTo<XmlElement > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTXmlElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "std::vector<XmlElementPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<XmlElementPtr > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try 
    {
      try {
        {
          CountPtrTo<XmlElement > &_result_ref = std_vector_Sl_XmlElementPtr_Sg____getitem__(arg1,arg2);
          result = (CountPtrTo<XmlElement > *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_std__out_of_range, SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CountPtrToTXmlElement_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElementVector___setitem__(int argc, VALUE *argv, VALUE self) {
  std::vector<XmlElementPtr > *arg1 = (std::vector<XmlElementPtr > *) 0 ;
  int arg2 ;
  CountPtrTo<XmlElement > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTXmlElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "std::vector<XmlElementPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<XmlElementPtr > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CountPtrToTXmlElement_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "__setitem__" "', argument " "3"" of type '" "CountPtrTo<XmlElement > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__setitem__" "', argument " "3"" of type '" "CountPtrTo<XmlElement > const &""'"); 
  }
  arg3 = reinterpret_cast< CountPtrTo<XmlElement > * >(argp3);
  {
    try 
    {
      try {
        std_vector_Sl_XmlElementPtr_Sg____setitem__(arg1,arg2,(CountPtrTo<XmlElement > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_std__out_of_range, SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlElementVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector<XmlElementPtr > *arg1 = (std::vector<XmlElementPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorTCountPtrToTXmlElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "each" "', argument " "1"" of type '" "std::vector<XmlElementPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<XmlElementPtr > * >(argp1);
  {
    try 
    {
      std_vector_Sl_XmlElementPtr_Sg__each(arg1); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_XmlElementPtr_Sg_(std::vector<XmlElementPtr > *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cSigner;

SWIGINTERN VALUE
_wrap_new_Signer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper<CountPtrTo<XmlDoc > > arg1 ;
  SwigValueWrapper<CountPtrTo<Key > > arg2 ;
  Signer *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CountPtrToTXmlDoc_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Signer" "', argument " "1"" of type '" "XmlDocClassPtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Signer" "', argument " "1"" of type '" "XmlDocClassPtr""'");
    } else {
      arg1 = *(reinterpret_cast< XmlDocClassPtr * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CountPtrToTKey_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Signer" "', argument " "2"" of type '" "KeyPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Signer" "', argument " "2"" of type '" "KeyPtr""'");
    } else {
      arg2 = *(reinterpret_cast< KeyPtr * >(argp2));
    }
  }
  {
    try 
    {
      result = (Signer *)new Signer(arg1,arg2);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Signer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper<CountPtrTo<XmlDoc > > arg1 ;
  SwigValueWrapper<CountPtrTo<Key > > arg2 ;
  SwigValueWrapper<CountPtrTo<Key > > arg3 ;
  Signer *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CountPtrToTXmlDoc_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Signer" "', argument " "1"" of type '" "XmlDocClassPtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Signer" "', argument " "1"" of type '" "XmlDocClassPtr""'");
    } else {
      arg1 = *(reinterpret_cast< XmlDocClassPtr * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CountPtrToTKey_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Signer" "', argument " "2"" of type '" "KeyPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Signer" "', argument " "2"" of type '" "KeyPtr""'");
    } else {
      arg2 = *(reinterpret_cast< KeyPtr * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CountPtrToTKey_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Signer" "', argument " "3"" of type '" "KeyPtr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Signer" "', argument " "3"" of type '" "KeyPtr""'");
    } else {
      arg3 = *(reinterpret_cast< KeyPtr * >(argp3));
    }
  }
  {
    try 
    {
      result = (Signer *)new Signer(arg1,arg2,arg3);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Signer__SWIG_2(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper<CountPtrTo<XmlDoc > > arg1 ;
  SwigValueWrapper<CountPtrTo<Key > > arg2 ;
  SwigValueWrapper<CountPtrTo<X509Certificate > > arg3 ;
  Signer *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CountPtrToTXmlDoc_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Signer" "', argument " "1"" of type '" "XmlDocClassPtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Signer" "', argument " "1"" of type '" "XmlDocClassPtr""'");
    } else {
      arg1 = *(reinterpret_cast< XmlDocClassPtr * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CountPtrToTKey_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Signer" "', argument " "2"" of type '" "KeyPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Signer" "', argument " "2"" of type '" "KeyPtr""'");
    } else {
      arg2 = *(reinterpret_cast< KeyPtr * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CountPtrToTX509Certificate_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Signer" "', argument " "3"" of type '" "X509CertificatePtr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Signer" "', argument " "3"" of type '" "X509CertificatePtr""'");
    } else {
      arg3 = *(reinterpret_cast< X509CertificatePtr * >(argp3));
    }
  }
  {
    try 
    {
      try {
        result = (Signer *)new Signer(arg1,arg2,arg3);DATA_PTR(self) = result;
        SWIG_RubyAddTracking(result, self);
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(ValueError &_e) {
        SWIG_exception(SWIG_ValueError, (&_e)->what());
        
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Signer_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Signer_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Signer);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Signer__SWIG_3(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper<CountPtrTo<XmlDoc > > arg1 ;
  SwigValueWrapper<CountPtrTo<Key > > arg2 ;
  std::vector<X509CertificatePtr > arg3 ;
  Signer *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CountPtrToTXmlDoc_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Signer" "', argument " "1"" of type '" "XmlDocClassPtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Signer" "', argument " "1"" of type '" "XmlDocClassPtr""'");
    } else {
      arg1 = *(reinterpret_cast< XmlDocClassPtr * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CountPtrToTKey_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Signer" "', argument " "2"" of type '" "KeyPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Signer" "', argument " "2"" of type '" "KeyPtr""'");
    } else {
      arg2 = *(reinterpret_cast< KeyPtr * >(argp2));
    }
  }
  {
    if (rb_obj_is_kind_of(argv[2],rb_cArray)) {
      unsigned int size = RARRAY_LEN(argv[2]);
      arg3;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(argv[2])[i];
        CountPtrTo<X509Certificate >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTX509Certificate_t, 1);
        (&arg3)->push_back(*x);
      }
    } else {
      void *ptr;
      SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 1);
      arg3 = *((std::vector<X509CertificatePtr > *) ptr);
    }
  }
  {
    try 
    {
      try {
        result = (Signer *)new Signer(arg1,arg2,arg3);DATA_PTR(self) = result;
        SWIG_RubyAddTracking(result, self);
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(ValueError &_e) {
        SWIG_exception(SWIG_ValueError, (&_e)->what());
        
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Signer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTXmlDoc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTKey_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Signer__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTXmlDoc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTKey_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CountPtrToTKey_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Signer__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTXmlDoc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTKey_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CountPtrToTX509Certificate_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Signer__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTXmlDoc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTKey_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          /* native sequence? */
          if (rb_obj_is_kind_of(argv[2],rb_cArray)) {
            unsigned int size = RARRAY_LEN(argv[2]);
            if (size == 0) {
              /* an empty sequence can be of any type */
              _v = 1;
            } else {
              /* check the first element only */
              CountPtrTo<X509Certificate >* x;
              VALUE o = RARRAY_PTR(argv[2])[0];
              if ((SWIG_ConvertPtr(o,(void **) &x, 
                    SWIGTYPE_p_CountPtrToTX509Certificate_t,0)) != -1)
              _v = 1;
              else
              _v = 0;
            }
          } else {
            /* wrapped vector? */
            std::vector<CountPtrTo<X509Certificate > >* v;
            if (SWIG_ConvertPtr(argv[2],(void **) &v, 
                SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t,0) != -1)
            _v = 1;
            else
            _v = 0;
          }
        }
        if (_v) {
          return _wrap_new_Signer__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Signer'");
  return Qnil;
}


SWIGINTERN void
free_Signer(Signer *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Signer_sign__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Signer *arg1 = (Signer *) 0 ;
  SwigValueWrapper<CountPtrTo<XmlDoc > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sign" "', argument " "1"" of type '" "Signer *""'"); 
  }
  arg1 = reinterpret_cast< Signer * >(argp1);
  {
    try 
    {
      try {
        result = (arg1)->sign();
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(DocError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DocError, SWIG_NewPointerObj((new DocError(static_cast< const DocError& >(_e))),SWIGTYPE_p_DocError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XPathError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XPathError, SWIG_NewPointerObj((new XPathError(static_cast< const XPathError& >(_e))),SWIGTYPE_p_XPathError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new XmlDocClassPtr(static_cast< const XmlDocClassPtr& >(result))), SWIGTYPE_p_CountPtrToTXmlDoc_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Signer_sign__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Signer *arg1 = (Signer *) 0 ;
  SwigValueWrapper<CountPtrTo<XPath > > arg2 ;
  SwigValueWrapper<CountPtrTo<XmlDoc > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sign" "', argument " "1"" of type '" "Signer *""'"); 
  }
  arg1 = reinterpret_cast< Signer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTXPath_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sign" "', argument " "2"" of type '" "XPathPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sign" "', argument " "2"" of type '" "XPathPtr""'");
    } else {
      arg2 = *(reinterpret_cast< XPathPtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (arg1)->sign(arg2);
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(DocError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DocError, SWIG_NewPointerObj((new DocError(static_cast< const DocError& >(_e))),SWIGTYPE_p_DocError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XPathError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XPathError, SWIG_NewPointerObj((new XPathError(static_cast< const XPathError& >(_e))),SWIGTYPE_p_XPathError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new XmlDocClassPtr(static_cast< const XmlDocClassPtr& >(result))), SWIGTYPE_p_CountPtrToTXmlDoc_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Signer_sign__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Signer *arg1 = (Signer *) 0 ;
  SwigValueWrapper<CountPtrTo<XPath > > arg2 ;
  bool arg3 ;
  SwigValueWrapper<CountPtrTo<XmlDoc > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sign" "', argument " "1"" of type '" "Signer *""'"); 
  }
  arg1 = reinterpret_cast< Signer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTXPath_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sign" "', argument " "2"" of type '" "XPathPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sign" "', argument " "2"" of type '" "XPathPtr""'");
    } else {
      arg2 = *(reinterpret_cast< XPathPtr * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sign" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try 
    {
      try {
        result = (arg1)->sign(arg2,arg3);
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(DocError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DocError, SWIG_NewPointerObj((new DocError(static_cast< const DocError& >(_e))),SWIGTYPE_p_DocError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XPathError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XPathError, SWIG_NewPointerObj((new XPathError(static_cast< const XPathError& >(_e))),SWIGTYPE_p_XPathError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new XmlDocClassPtr(static_cast< const XmlDocClassPtr& >(result))), SWIGTYPE_p_CountPtrToTXmlDoc_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Signer_sign(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Signer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Signer_sign__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Signer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTXPath_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Signer_sign__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Signer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTXPath_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Signer_sign__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Signer_sign'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Signer_signInPlace__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Signer *arg1 = (Signer *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "signInPlace" "', argument " "1"" of type '" "Signer *""'"); 
  }
  arg1 = reinterpret_cast< Signer * >(argp1);
  {
    try 
    {
      try {
        result = (int)(arg1)->signInPlace();
      }
      catch(DocError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DocError, SWIG_NewPointerObj((new DocError(static_cast< const DocError& >(_e))),SWIGTYPE_p_DocError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XPathError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XPathError, SWIG_NewPointerObj((new XPathError(static_cast< const XPathError& >(_e))),SWIGTYPE_p_XPathError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Signer_signInPlace__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Signer *arg1 = (Signer *) 0 ;
  SwigValueWrapper<CountPtrTo<XPath > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "signInPlace" "', argument " "1"" of type '" "Signer *""'"); 
  }
  arg1 = reinterpret_cast< Signer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTXPath_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "signInPlace" "', argument " "2"" of type '" "XPathPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "signInPlace" "', argument " "2"" of type '" "XPathPtr""'");
    } else {
      arg2 = *(reinterpret_cast< XPathPtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->signInPlace(arg2);
      }
      catch(DocError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DocError, SWIG_NewPointerObj((new DocError(static_cast< const DocError& >(_e))),SWIGTYPE_p_DocError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XPathError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XPathError, SWIG_NewPointerObj((new XPathError(static_cast< const XPathError& >(_e))),SWIGTYPE_p_XPathError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Signer_signInPlace__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Signer *arg1 = (Signer *) 0 ;
  SwigValueWrapper<CountPtrTo<XPath > > arg2 ;
  bool arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "signInPlace" "', argument " "1"" of type '" "Signer *""'"); 
  }
  arg1 = reinterpret_cast< Signer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTXPath_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "signInPlace" "', argument " "2"" of type '" "XPathPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "signInPlace" "', argument " "2"" of type '" "XPathPtr""'");
    } else {
      arg2 = *(reinterpret_cast< XPathPtr * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "signInPlace" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try 
    {
      try {
        result = (int)(arg1)->signInPlace(arg2,arg3);
      }
      catch(DocError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DocError, SWIG_NewPointerObj((new DocError(static_cast< const DocError& >(_e))),SWIGTYPE_p_DocError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XPathError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XPathError, SWIG_NewPointerObj((new XPathError(static_cast< const XPathError& >(_e))),SWIGTYPE_p_XPathError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Signer_signInPlace(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Signer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Signer_signInPlace__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Signer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTXPath_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Signer_signInPlace__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Signer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTXPath_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Signer_signInPlace__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Signer_signInPlace'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Signer_setKeyStore(int argc, VALUE *argv, VALUE self) {
  Signer *arg1 = (Signer *) 0 ;
  SwigValueWrapper<CountPtrTo<KeyStore > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setKeyStore" "', argument " "1"" of type '" "Signer *""'"); 
  }
  arg1 = reinterpret_cast< Signer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTKeyStore_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setKeyStore" "', argument " "2"" of type '" "KeyStorePtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setKeyStore" "', argument " "2"" of type '" "KeyStorePtr""'");
    } else {
      arg2 = *(reinterpret_cast< KeyStorePtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->setKeyStore(arg2);
      }
      catch(ValueError &_e) {
        SWIG_exception(SWIG_ValueError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Signer_addCertFromFile(int argc, VALUE *argv, VALUE self) {
  Signer *arg1 = (Signer *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addCertFromFile" "', argument " "1"" of type '" "Signer *""'"); 
  }
  arg1 = reinterpret_cast< Signer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addCertFromFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "addCertFromFile" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->addCertFromFile(arg2,arg3);
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(IOError &_e) {
        SWIG_exception(SWIG_IOError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Signer_addCert(int argc, VALUE *argv, VALUE self) {
  Signer *arg1 = (Signer *) 0 ;
  SwigValueWrapper<CountPtrTo<X509Certificate > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addCert" "', argument " "1"" of type '" "Signer *""'"); 
  }
  arg1 = reinterpret_cast< Signer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTX509Certificate_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addCert" "', argument " "2"" of type '" "X509CertificatePtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addCert" "', argument " "2"" of type '" "X509CertificatePtr""'");
    } else {
      arg2 = *(reinterpret_cast< X509CertificatePtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->addCert(arg2);
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(ValueError &_e) {
        SWIG_exception(SWIG_ValueError, (&_e)->what());
        
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Signer_useExclusiveCanonicalizer(int argc, VALUE *argv, VALUE self) {
  Signer *arg1 = (Signer *) 0 ;
  std::string arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "useExclusiveCanonicalizer" "', argument " "1"" of type '" "Signer *""'"); 
  }
  arg1 = reinterpret_cast< Signer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "useExclusiveCanonicalizer" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try 
    {
      result = (int)(arg1)->useExclusiveCanonicalizer(arg2); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Signer_addReference(int argc, VALUE *argv, VALUE self) {
  Signer *arg1 = (Signer *) 0 ;
  SwigValueWrapper<CountPtrTo<XPath > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addReference" "', argument " "1"" of type '" "Signer *""'"); 
  }
  arg1 = reinterpret_cast< Signer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTXPath_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addReference" "', argument " "2"" of type '" "XPathPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addReference" "', argument " "2"" of type '" "XPathPtr""'");
    } else {
      arg2 = *(reinterpret_cast< XPathPtr * >(argp2));
    }
  }
  {
    try 
    {
      (arg1)->addReference(arg2); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Signer_attachPublicKey(int argc, VALUE *argv, VALUE self) {
  Signer *arg1 = (Signer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "attachPublicKey" "', argument " "1"" of type '" "Signer *""'"); 
  }
  arg1 = reinterpret_cast< Signer * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "attachPublicKey" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try 
    {
      (arg1)->attachPublicKey(arg2); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


swig_class cVerifier;

SWIGINTERN VALUE
_wrap_new_Verifier__SWIG_0(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper<CountPtrTo<XmlDoc > > arg1 ;
  Verifier *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CountPtrToTXmlDoc_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Verifier" "', argument " "1"" of type '" "XmlDocClassPtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Verifier" "', argument " "1"" of type '" "XmlDocClassPtr""'");
    } else {
      arg1 = *(reinterpret_cast< XmlDocClassPtr * >(argp1));
    }
  }
  {
    try 
    {
      try {
        result = (Verifier *)new Verifier(arg1);DATA_PTR(self) = result;
        SWIG_RubyAddTracking(result, self);
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Verifier_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Verifier_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Verifier);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Verifier__SWIG_1(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper<CountPtrTo<XmlDoc > > arg1 ;
  SwigValueWrapper<CountPtrTo<XPath > > arg2 ;
  Verifier *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CountPtrToTXmlDoc_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Verifier" "', argument " "1"" of type '" "XmlDocClassPtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Verifier" "', argument " "1"" of type '" "XmlDocClassPtr""'");
    } else {
      arg1 = *(reinterpret_cast< XmlDocClassPtr * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CountPtrToTXPath_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Verifier" "', argument " "2"" of type '" "XPathPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Verifier" "', argument " "2"" of type '" "XPathPtr""'");
    } else {
      arg2 = *(reinterpret_cast< XPathPtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (Verifier *)new Verifier(arg1,arg2);DATA_PTR(self) = result;
        SWIG_RubyAddTracking(result, self);
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Verifier(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTXmlDoc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Verifier__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CountPtrToTXmlDoc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTXPath_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Verifier__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Verifier'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Verifier_setKeyStore(int argc, VALUE *argv, VALUE self) {
  Verifier *arg1 = (Verifier *) 0 ;
  SwigValueWrapper<CountPtrTo<KeyStore > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Verifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setKeyStore" "', argument " "1"" of type '" "Verifier *""'"); 
  }
  arg1 = reinterpret_cast< Verifier * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTKeyStore_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setKeyStore" "', argument " "2"" of type '" "KeyStorePtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setKeyStore" "', argument " "2"" of type '" "KeyStorePtr""'");
    } else {
      arg2 = *(reinterpret_cast< KeyStorePtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->setKeyStore(arg2);
      }
      catch(ValueError &_e) {
        SWIG_exception(SWIG_ValueError, (&_e)->what());
        
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Verifier_verify__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Verifier *arg1 = (Verifier *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Verifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verify" "', argument " "1"" of type '" "Verifier *""'"); 
  }
  arg1 = reinterpret_cast< Verifier * >(argp1);
  {
    try 
    {
      try {
        result = (int)(arg1)->verify();
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(DocError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DocError, SWIG_NewPointerObj((new DocError(static_cast< const DocError& >(_e))),SWIGTYPE_p_DocError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XMLError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XMLError, SWIG_NewPointerObj((new XMLError(static_cast< const XMLError& >(_e))),SWIGTYPE_p_XMLError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Verifier_verify__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Verifier *arg1 = (Verifier *) 0 ;
  SwigValueWrapper<CountPtrTo<Key > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Verifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verify" "', argument " "1"" of type '" "Verifier *""'"); 
  }
  arg1 = reinterpret_cast< Verifier * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTKey_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "verify" "', argument " "2"" of type '" "KeyPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "verify" "', argument " "2"" of type '" "KeyPtr""'");
    } else {
      arg2 = *(reinterpret_cast< KeyPtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->verify(arg2);
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(MemoryError &_e) {
        SWIG_exception(SWIG_MemoryError, (&_e)->what());
        
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(DocError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DocError, SWIG_NewPointerObj((new DocError(static_cast< const DocError& >(_e))),SWIGTYPE_p_DocError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XMLError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XMLError, SWIG_NewPointerObj((new XMLError(static_cast< const XMLError& >(_e))),SWIGTYPE_p_XMLError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Verifier_verify(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Verifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Verifier_verify__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Verifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTKey_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Verifier_verify__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Verifier_verify'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Verifier_getVerifyingKey(int argc, VALUE *argv, VALUE self) {
  Verifier *arg1 = (Verifier *) 0 ;
  SwigValueWrapper<CountPtrTo<Key > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Verifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getVerifyingKey" "', argument " "1"" of type '" "Verifier *""'"); 
  }
  arg1 = reinterpret_cast< Verifier * >(argp1);
  {
    try 
    {
      try {
        result = (arg1)->getVerifyingKey();
      }
      catch(DocError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DocError, SWIG_NewPointerObj((new DocError(static_cast< const DocError& >(_e))),SWIGTYPE_p_DocError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XMLError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XMLError, SWIG_NewPointerObj((new XMLError(static_cast< const XMLError& >(_e))),SWIGTYPE_p_XMLError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new KeyPtr(static_cast< const KeyPtr& >(result))), SWIGTYPE_p_CountPtrToTKey_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Verifier_isReferenced(int argc, VALUE *argv, VALUE self) {
  Verifier *arg1 = (Verifier *) 0 ;
  SwigValueWrapper<CountPtrTo<XPath > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Verifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isReferenced" "', argument " "1"" of type '" "Verifier *""'"); 
  }
  arg1 = reinterpret_cast< Verifier * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTXPath_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "isReferenced" "', argument " "2"" of type '" "XPathPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "isReferenced" "', argument " "2"" of type '" "XPathPtr""'");
    } else {
      arg2 = *(reinterpret_cast< XPathPtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->isReferenced(arg2);
      }
      catch(DocError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DocError, SWIG_NewPointerObj((new DocError(static_cast< const DocError& >(_e))),SWIGTYPE_p_DocError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XMLError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XMLError, SWIG_NewPointerObj((new XMLError(static_cast< const XMLError& >(_e))),SWIGTYPE_p_XMLError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Verifier_getReferencedElements(int argc, VALUE *argv, VALUE self) {
  Verifier *arg1 = (Verifier *) 0 ;
  std::vector<XmlElementPtr > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Verifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getReferencedElements" "', argument " "1"" of type '" "Verifier *""'"); 
  }
  arg1 = reinterpret_cast< Verifier * >(argp1);
  {
    try 
    {
      try {
        result = (arg1)->getReferencedElements();
      }
      catch(XMLError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XMLError, SWIG_NewPointerObj((new XMLError(static_cast< const XMLError& >(_e))),SWIGTYPE_p_XMLError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  {
    vresult = rb_ary_new2((&result)->size());
    for (unsigned int i=0; i<(&result)->size(); i++) {
      CountPtrTo<XmlElement >* x = new CountPtrTo<XmlElement >(((std::vector<XmlElementPtr > &)result)[i]);
      rb_ary_store(vresult,i,
        SWIG_NewPointerObj((void *) x, 
          SWIGTYPE_p_CountPtrToTXmlElement_t, 1));
    }
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Verifier_getCertificate(int argc, VALUE *argv, VALUE self) {
  Verifier *arg1 = (Verifier *) 0 ;
  SwigValueWrapper<CountPtrTo<X509Certificate > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Verifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCertificate" "', argument " "1"" of type '" "Verifier *""'"); 
  }
  arg1 = reinterpret_cast< Verifier * >(argp1);
  {
    try 
    {
      try {
        result = (arg1)->getCertificate();
      }
      catch(DocError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DocError, SWIG_NewPointerObj((new DocError(static_cast< const DocError& >(_e))),SWIGTYPE_p_DocError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XMLError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XMLError, SWIG_NewPointerObj((new XMLError(static_cast< const XMLError& >(_e))),SWIGTYPE_p_XMLError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_NewPointerObj((new X509CertificatePtr(static_cast< const X509CertificatePtr& >(result))), SWIGTYPE_p_CountPtrToTX509Certificate_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Verifier_getCertificateChain(int argc, VALUE *argv, VALUE self) {
  Verifier *arg1 = (Verifier *) 0 ;
  std::vector<X509CertificatePtr > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Verifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCertificateChain" "', argument " "1"" of type '" "Verifier *""'"); 
  }
  arg1 = reinterpret_cast< Verifier * >(argp1);
  {
    try 
    {
      try {
        result = (arg1)->getCertificateChain();
      }
      catch(DocError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DocError, SWIG_NewPointerObj((new DocError(static_cast< const DocError& >(_e))),SWIGTYPE_p_DocError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(XMLError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XMLError, SWIG_NewPointerObj((new XMLError(static_cast< const XMLError& >(_e))),SWIGTYPE_p_XMLError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  {
    vresult = rb_ary_new2((&result)->size());
    for (unsigned int i=0; i<(&result)->size(); i++) {
      CountPtrTo<X509Certificate >* x = new CountPtrTo<X509Certificate >(((std::vector<X509CertificatePtr > &)result)[i]);
      rb_ary_store(vresult,i,
        SWIG_NewPointerObj((void *) x, 
          SWIGTYPE_p_CountPtrToTX509Certificate_t, 1));
    }
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Verifier_skipCertCheck(int argc, VALUE *argv, VALUE self) {
  Verifier *arg1 = (Verifier *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Verifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "skipCertCheck" "', argument " "1"" of type '" "Verifier *""'"); 
  }
  arg1 = reinterpret_cast< Verifier * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "skipCertCheck" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try 
    {
      (arg1)->skipCertCheck(arg2); 
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_Verifier(Verifier *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cTrustVerifier;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_TrustVerifier_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_TrustVerifier_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TrustVerifier);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_TrustVerifier(int argc, VALUE *argv, VALUE self) {
  TrustVerifier *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try 
    {
      result = (TrustVerifier *)new TrustVerifier();DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_TrustVerifier(TrustVerifier *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_TrustVerifier_verifyTrust__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TrustVerifier *arg1 = (TrustVerifier *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TrustVerifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verifyTrust" "', argument " "1"" of type '" "TrustVerifier *""'"); 
  }
  arg1 = reinterpret_cast< TrustVerifier * >(argp1);
  {
    try 
    {
      try {
        result = (int)(arg1)->verifyTrust();
      }
      catch(TrustVerificationError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_TrustVerificationError, SWIG_NewPointerObj((new TrustVerificationError(static_cast< const TrustVerificationError& >(_e))),SWIGTYPE_p_TrustVerificationError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TrustVerifier_verifyTrust__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TrustVerifier *arg1 = (TrustVerifier *) 0 ;
  SwigValueWrapper<CountPtrTo<Key > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TrustVerifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verifyTrust" "', argument " "1"" of type '" "TrustVerifier *""'"); 
  }
  arg1 = reinterpret_cast< TrustVerifier * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTKey_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "verifyTrust" "', argument " "2"" of type '" "KeyPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "verifyTrust" "', argument " "2"" of type '" "KeyPtr""'");
    } else {
      arg2 = *(reinterpret_cast< KeyPtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->verifyTrust(arg2);
      }
      catch(TrustVerificationError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_TrustVerificationError, SWIG_NewPointerObj((new TrustVerificationError(static_cast< const TrustVerificationError& >(_e))),SWIGTYPE_p_TrustVerificationError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TrustVerifier_verifyTrust__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TrustVerifier *arg1 = (TrustVerifier *) 0 ;
  std::vector<X509CertificatePtr > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TrustVerifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verifyTrust" "', argument " "1"" of type '" "TrustVerifier *""'"); 
  }
  arg1 = reinterpret_cast< TrustVerifier * >(argp1);
  {
    if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
      unsigned int size = RARRAY_LEN(argv[0]);
      arg2;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(argv[0])[i];
        CountPtrTo<X509Certificate >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTX509Certificate_t, 1);
        (&arg2)->push_back(*x);
      }
    } else {
      void *ptr;
      SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 1);
      arg2 = *((std::vector<X509CertificatePtr > *) ptr);
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->verifyTrust(arg2);
      }
      catch(TrustVerificationError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_TrustVerificationError, SWIG_NewPointerObj((new TrustVerificationError(static_cast< const TrustVerificationError& >(_e))),SWIGTYPE_p_TrustVerificationError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_TrustVerifier_verifyTrust(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TrustVerifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TrustVerifier_verifyTrust__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TrustVerifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTKey_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TrustVerifier_verifyTrust__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TrustVerifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        /* native sequence? */
        if (rb_obj_is_kind_of(argv[1],rb_cArray)) {
          unsigned int size = RARRAY_LEN(argv[1]);
          if (size == 0) {
            /* an empty sequence can be of any type */
            _v = 1;
          } else {
            /* check the first element only */
            CountPtrTo<X509Certificate >* x;
            VALUE o = RARRAY_PTR(argv[1])[0];
            if ((SWIG_ConvertPtr(o,(void **) &x, 
                  SWIGTYPE_p_CountPtrToTX509Certificate_t,0)) != -1)
            _v = 1;
            else
            _v = 0;
          }
        } else {
          /* wrapped vector? */
          std::vector<CountPtrTo<X509Certificate > >* v;
          if (SWIG_ConvertPtr(argv[1],(void **) &v, 
              SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t,0) != -1)
          _v = 1;
          else
          _v = 0;
        }
      }
      if (_v) {
        return _wrap_TrustVerifier_verifyTrust__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'TrustVerifier_verifyTrust'");
  return Qnil;
}


swig_class cSimpleTrustVerifier;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_SimpleTrustVerifier_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_SimpleTrustVerifier_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_SimpleTrustVerifier);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_SimpleTrustVerifier(int argc, VALUE *argv, VALUE self) {
  std::vector<KeyPtr > arg1 ;
  SimpleTrustVerifier *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
      unsigned int size = RARRAY_LEN(argv[0]);
      arg1;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(argv[0])[i];
        CountPtrTo<Key >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTKey_t, 1);
        (&arg1)->push_back(*x);
      }
    } else {
      void *ptr;
      SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t, 1);
      arg1 = *((std::vector<KeyPtr > *) ptr);
    }
  }
  {
    try 
    {
      result = (SimpleTrustVerifier *)new SimpleTrustVerifier(arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_SimpleTrustVerifier(SimpleTrustVerifier *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_SimpleTrustVerifier_verifyTrust__SWIG_0(int argc, VALUE *argv, VALUE self) {
  SimpleTrustVerifier *arg1 = (SimpleTrustVerifier *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SimpleTrustVerifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verifyTrust" "', argument " "1"" of type '" "SimpleTrustVerifier *""'"); 
  }
  arg1 = reinterpret_cast< SimpleTrustVerifier * >(argp1);
  {
    try 
    {
      try {
        result = (int)(arg1)->verifyTrust();
      }
      catch(TrustVerificationError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_TrustVerificationError, SWIG_NewPointerObj((new TrustVerificationError(static_cast< const TrustVerificationError& >(_e))),SWIGTYPE_p_TrustVerificationError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTrustVerifier_verifyTrust__SWIG_1(int argc, VALUE *argv, VALUE self) {
  SimpleTrustVerifier *arg1 = (SimpleTrustVerifier *) 0 ;
  SwigValueWrapper<CountPtrTo<Key > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SimpleTrustVerifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verifyTrust" "', argument " "1"" of type '" "SimpleTrustVerifier *""'"); 
  }
  arg1 = reinterpret_cast< SimpleTrustVerifier * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTKey_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "verifyTrust" "', argument " "2"" of type '" "KeyPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "verifyTrust" "', argument " "2"" of type '" "KeyPtr""'");
    } else {
      arg2 = *(reinterpret_cast< KeyPtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->verifyTrust(arg2);
      }
      catch(TrustVerificationError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_TrustVerificationError, SWIG_NewPointerObj((new TrustVerificationError(static_cast< const TrustVerificationError& >(_e))),SWIGTYPE_p_TrustVerificationError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTrustVerifier_verifyTrust__SWIG_2(int argc, VALUE *argv, VALUE self) {
  SimpleTrustVerifier *arg1 = (SimpleTrustVerifier *) 0 ;
  std::vector<X509CertificatePtr > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SimpleTrustVerifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verifyTrust" "', argument " "1"" of type '" "SimpleTrustVerifier *""'"); 
  }
  arg1 = reinterpret_cast< SimpleTrustVerifier * >(argp1);
  {
    if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
      unsigned int size = RARRAY_LEN(argv[0]);
      arg2;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(argv[0])[i];
        CountPtrTo<X509Certificate >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTX509Certificate_t, 1);
        (&arg2)->push_back(*x);
      }
    } else {
      void *ptr;
      SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 1);
      arg2 = *((std::vector<X509CertificatePtr > *) ptr);
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->verifyTrust(arg2);
      }
      catch(TrustVerificationError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_TrustVerificationError, SWIG_NewPointerObj((new TrustVerificationError(static_cast< const TrustVerificationError& >(_e))),SWIGTYPE_p_TrustVerificationError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SimpleTrustVerifier_verifyTrust(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SimpleTrustVerifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimpleTrustVerifier_verifyTrust__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SimpleTrustVerifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTKey_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimpleTrustVerifier_verifyTrust__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SimpleTrustVerifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        /* native sequence? */
        if (rb_obj_is_kind_of(argv[1],rb_cArray)) {
          unsigned int size = RARRAY_LEN(argv[1]);
          if (size == 0) {
            /* an empty sequence can be of any type */
            _v = 1;
          } else {
            /* check the first element only */
            CountPtrTo<X509Certificate >* x;
            VALUE o = RARRAY_PTR(argv[1])[0];
            if ((SWIG_ConvertPtr(o,(void **) &x, 
                  SWIGTYPE_p_CountPtrToTX509Certificate_t,0)) != -1)
            _v = 1;
            else
            _v = 0;
          }
        } else {
          /* wrapped vector? */
          std::vector<CountPtrTo<X509Certificate > >* v;
          if (SWIG_ConvertPtr(argv[1],(void **) &v, 
              SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t,0) != -1)
          _v = 1;
          else
          _v = 0;
        }
      }
      if (_v) {
        return _wrap_SimpleTrustVerifier_verifyTrust__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'SimpleTrustVerifier_verifyTrust'");
  return Qnil;
}


swig_class cX509TrustVerifier;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_X509TrustVerifier_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_X509TrustVerifier_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_X509TrustVerifier);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_X509TrustVerifier(int argc, VALUE *argv, VALUE self) {
  std::vector<X509CertificatePtr > arg1 ;
  X509TrustVerifier *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
      unsigned int size = RARRAY_LEN(argv[0]);
      arg1;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(argv[0])[i];
        CountPtrTo<X509Certificate >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTX509Certificate_t, 1);
        (&arg1)->push_back(*x);
      }
    } else {
      void *ptr;
      SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 1);
      arg1 = *((std::vector<X509CertificatePtr > *) ptr);
    }
  }
  {
    try 
    {
      result = (X509TrustVerifier *)new X509TrustVerifier(arg1);DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_X509TrustVerifier(X509TrustVerifier *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_X509TrustVerifier_verifyTrust__SWIG_0(int argc, VALUE *argv, VALUE self) {
  X509TrustVerifier *arg1 = (X509TrustVerifier *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_X509TrustVerifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verifyTrust" "', argument " "1"" of type '" "X509TrustVerifier *""'"); 
  }
  arg1 = reinterpret_cast< X509TrustVerifier * >(argp1);
  {
    try 
    {
      try {
        result = (int)(arg1)->verifyTrust();
      }
      catch(TrustVerificationError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_TrustVerificationError, SWIG_NewPointerObj((new TrustVerificationError(static_cast< const TrustVerificationError& >(_e))),SWIGTYPE_p_TrustVerificationError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509TrustVerifier_verifyTrust__SWIG_1(int argc, VALUE *argv, VALUE self) {
  X509TrustVerifier *arg1 = (X509TrustVerifier *) 0 ;
  SwigValueWrapper<CountPtrTo<Key > > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_X509TrustVerifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verifyTrust" "', argument " "1"" of type '" "X509TrustVerifier *""'"); 
  }
  arg1 = reinterpret_cast< X509TrustVerifier * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CountPtrToTKey_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "verifyTrust" "', argument " "2"" of type '" "KeyPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "verifyTrust" "', argument " "2"" of type '" "KeyPtr""'");
    } else {
      arg2 = *(reinterpret_cast< KeyPtr * >(argp2));
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->verifyTrust(arg2);
      }
      catch(TrustVerificationError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_TrustVerificationError, SWIG_NewPointerObj((new TrustVerificationError(static_cast< const TrustVerificationError& >(_e))),SWIGTYPE_p_TrustVerificationError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_X509TrustVerifier_verifyTrust__SWIG_2(int argc, VALUE *argv, VALUE self) {
  X509TrustVerifier *arg1 = (X509TrustVerifier *) 0 ;
  std::vector<X509CertificatePtr > arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_X509TrustVerifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verifyTrust" "', argument " "1"" of type '" "X509TrustVerifier *""'"); 
  }
  arg1 = reinterpret_cast< X509TrustVerifier * >(argp1);
  {
    if (rb_obj_is_kind_of(argv[0],rb_cArray)) {
      unsigned int size = RARRAY_LEN(argv[0]);
      arg2;
      for (unsigned int i=0; i<size; i++) {
        VALUE o = RARRAY_PTR(argv[0])[i];
        CountPtrTo<X509Certificate >* x;
        SWIG_ConvertPtr(o, (void **) &x, SWIGTYPE_p_CountPtrToTX509Certificate_t, 1);
        (&arg2)->push_back(*x);
      }
    } else {
      void *ptr;
      SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, 1);
      arg2 = *((std::vector<X509CertificatePtr > *) ptr);
    }
  }
  {
    try 
    {
      try {
        result = (int)(arg1)->verifyTrust(arg2);
      }
      catch(TrustVerificationError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_TrustVerificationError, SWIG_NewPointerObj((new TrustVerificationError(static_cast< const TrustVerificationError& >(_e))),SWIGTYPE_p_TrustVerificationError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(LibError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_LibError, SWIG_NewPointerObj((new LibError(static_cast< const LibError& >(_e))),SWIGTYPE_p_LibError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      catch(KeyError &_e) {
        rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_KeyError, SWIG_NewPointerObj((new KeyError(static_cast< const KeyError& >(_e))),SWIGTYPE_p_KeyError,SWIG_POINTER_OWN))); SWIG_fail;
      }
      
    } 
    catch (DsigException& e) 
    {
      SWIG_exception(SWIG_RuntimeError, e.what()); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_X509TrustVerifier_verifyTrust(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_X509TrustVerifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_X509TrustVerifier_verifyTrust__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_X509TrustVerifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CountPtrToTKey_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_X509TrustVerifier_verifyTrust__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_X509TrustVerifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        /* native sequence? */
        if (rb_obj_is_kind_of(argv[1],rb_cArray)) {
          unsigned int size = RARRAY_LEN(argv[1]);
          if (size == 0) {
            /* an empty sequence can be of any type */
            _v = 1;
          } else {
            /* check the first element only */
            CountPtrTo<X509Certificate >* x;
            VALUE o = RARRAY_PTR(argv[1])[0];
            if ((SWIG_ConvertPtr(o,(void **) &x, 
                  SWIGTYPE_p_CountPtrToTX509Certificate_t,0)) != -1)
            _v = 1;
            else
            _v = 0;
          }
        } else {
          /* wrapped vector? */
          std::vector<CountPtrTo<X509Certificate > >* v;
          if (SWIG_ConvertPtr(argv[1],(void **) &v, 
              SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t,0) != -1)
          _v = 1;
          else
          _v = 0;
        }
      }
      if (_v) {
        return _wrap_X509TrustVerifier_verifyTrust__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'X509TrustVerifier_verifyTrust'");
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_SimpleTrustVerifierTo_p_TrustVerifier(void *x) {
    return (void *)((TrustVerifier *)  ((SimpleTrustVerifier *) x));
}
static void *_p_X509TrustVerifierTo_p_TrustVerifier(void *x) {
    return (void *)((TrustVerifier *)  ((X509TrustVerifier *) x));
}
static void *_p_TrustVerificationErrorTo_p_DsigException(void *x) {
    return (void *)((DsigException *)  ((TrustVerificationError *) x));
}
static void *_p_KeyErrorTo_p_DsigException(void *x) {
    return (void *)((DsigException *)  ((KeyError *) x));
}
static void *_p_MemoryErrorTo_p_DsigException(void *x) {
    return (void *)((DsigException *)  ((MemoryError *) x));
}
static void *_p_IOErrorTo_p_DsigException(void *x) {
    return (void *)((DsigException *)  ((IOError *) x));
}
static void *_p_ValueErrorTo_p_DsigException(void *x) {
    return (void *)((DsigException *)  ((ValueError *) x));
}
static void *_p_XPathErrorTo_p_DsigException(void *x) {
    return (void *)((DsigException *)  ((XPathError *) x));
}
static void *_p_XMLErrorTo_p_DsigException(void *x) {
    return (void *)((DsigException *)  ((XMLError *) x));
}
static void *_p_LibErrorTo_p_DsigException(void *x) {
    return (void *)((DsigException *)  ((LibError *) x));
}
static void *_p_DocErrorTo_p_DsigException(void *x) {
    return (void *)((DsigException *)  ((DocError *) x));
}
static swig_type_info _swigt__p_CountPtrToTKeyStore_t = {"_p_CountPtrToTKeyStore_t", "CountPtrTo<KeyStore > *|KeyStorePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CountPtrToTKey_t = {"_p_CountPtrToTKey_t", "CountPtrTo<Key > *|KeyPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CountPtrToTX509Certificate_t = {"_p_CountPtrToTX509Certificate_t", "CountPtrTo<X509Certificate > *|X509CertificatePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CountPtrToTXPath_t = {"_p_CountPtrToTXPath_t", "CountPtrTo<XPath > *|XPathPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CountPtrToTXmlDoc_t = {"_p_CountPtrToTXmlDoc_t", "CountPtrTo<XmlDoc > *|XmlDocClassPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CountPtrToTXmlElement_t = {"_p_CountPtrToTXmlElement_t", "CountPtrTo<XmlElement > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DocError = {"_p_DocError", "DocError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DsigException = {"_p_DsigException", "DsigException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IOError = {"_p_IOError", "IOError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Key = {"_p_Key", "Key *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_KeyError = {"_p_KeyError", "KeyError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_KeyStore = {"_p_KeyStore", "KeyStore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LibError = {"_p_LibError", "LibError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MemoryError = {"_p_MemoryError", "MemoryError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Signer = {"_p_Signer", "Signer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleTrustVerifier = {"_p_SimpleTrustVerifier", "SimpleTrustVerifier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TrustVerificationError = {"_p_TrustVerificationError", "TrustVerificationError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TrustVerifier = {"_p_TrustVerifier", "TrustVerifier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueError = {"_p_ValueError", "ValueError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Verifier = {"_p_Verifier", "Verifier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_X509Certificate = {"_p_X509Certificate", "X509Certificate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_X509TrustVerifier = {"_p_X509TrustVerifier", "X509TrustVerifier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XMLError = {"_p_XMLError", "XMLError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XPath = {"_p_XPath", "XPath *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XPathError = {"_p_XPathError", "XPathError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlDoc = {"_p_XmlDoc", "XmlDoc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlElement = {"_p_XmlElement", "XmlElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__out_of_range = {"_p_std__out_of_range", "std::out_of_range *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTCountPtrToTKey_t_t = {"_p_std__vectorTCountPtrToTKey_t_t", "std::vector<CountPtrTo<Key > > *|std::vector<KeyPtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTCountPtrToTX509Certificate_t_t = {"_p_std__vectorTCountPtrToTX509Certificate_t_t", "std::vector<CountPtrTo<X509Certificate > > *|std::vector<X509CertificatePtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTCountPtrToTXmlElement_t_t = {"_p_std__vectorTCountPtrToTXmlElement_t_t", "std::vector<CountPtrTo<XmlElement > > *|std::vector<XmlElementPtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vectorTCountPtrToTX509Certificate_t_t = {"_p_vectorTCountPtrToTX509Certificate_t_t", "vector<CountPtrTo<X509Certificate > > *|vector<X509CertificatePtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xmlNodePtr = {"_p_xmlNodePtr", "xmlNodePtr *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CountPtrToTKeyStore_t,
  &_swigt__p_CountPtrToTKey_t,
  &_swigt__p_CountPtrToTX509Certificate_t,
  &_swigt__p_CountPtrToTXPath_t,
  &_swigt__p_CountPtrToTXmlDoc_t,
  &_swigt__p_CountPtrToTXmlElement_t,
  &_swigt__p_DocError,
  &_swigt__p_DsigException,
  &_swigt__p_IOError,
  &_swigt__p_Key,
  &_swigt__p_KeyError,
  &_swigt__p_KeyStore,
  &_swigt__p_LibError,
  &_swigt__p_MemoryError,
  &_swigt__p_Signer,
  &_swigt__p_SimpleTrustVerifier,
  &_swigt__p_TrustVerificationError,
  &_swigt__p_TrustVerifier,
  &_swigt__p_ValueError,
  &_swigt__p_Verifier,
  &_swigt__p_X509Certificate,
  &_swigt__p_X509TrustVerifier,
  &_swigt__p_XMLError,
  &_swigt__p_XPath,
  &_swigt__p_XPathError,
  &_swigt__p_XmlDoc,
  &_swigt__p_XmlElement,
  &_swigt__p_char,
  &_swigt__p_std__out_of_range,
  &_swigt__p_std__vectorTCountPtrToTKey_t_t,
  &_swigt__p_std__vectorTCountPtrToTX509Certificate_t_t,
  &_swigt__p_std__vectorTCountPtrToTXmlElement_t_t,
  &_swigt__p_vectorTCountPtrToTX509Certificate_t_t,
  &_swigt__p_xmlNodePtr,
};

static swig_cast_info _swigc__p_CountPtrToTKeyStore_t[] = {  {&_swigt__p_CountPtrToTKeyStore_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CountPtrToTKey_t[] = {  {&_swigt__p_CountPtrToTKey_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CountPtrToTX509Certificate_t[] = {  {&_swigt__p_CountPtrToTX509Certificate_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CountPtrToTXPath_t[] = {  {&_swigt__p_CountPtrToTXPath_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CountPtrToTXmlDoc_t[] = {  {&_swigt__p_CountPtrToTXmlDoc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CountPtrToTXmlElement_t[] = {  {&_swigt__p_CountPtrToTXmlElement_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DocError[] = {  {&_swigt__p_DocError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DsigException[] = {  {&_swigt__p_TrustVerificationError, _p_TrustVerificationErrorTo_p_DsigException, 0, 0},  {&_swigt__p_DsigException, 0, 0, 0},  {&_swigt__p_KeyError, _p_KeyErrorTo_p_DsigException, 0, 0},  {&_swigt__p_MemoryError, _p_MemoryErrorTo_p_DsigException, 0, 0},  {&_swigt__p_IOError, _p_IOErrorTo_p_DsigException, 0, 0},  {&_swigt__p_ValueError, _p_ValueErrorTo_p_DsigException, 0, 0},  {&_swigt__p_XPathError, _p_XPathErrorTo_p_DsigException, 0, 0},  {&_swigt__p_XMLError, _p_XMLErrorTo_p_DsigException, 0, 0},  {&_swigt__p_LibError, _p_LibErrorTo_p_DsigException, 0, 0},  {&_swigt__p_DocError, _p_DocErrorTo_p_DsigException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IOError[] = {  {&_swigt__p_IOError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Key[] = {  {&_swigt__p_Key, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KeyError[] = {  {&_swigt__p_KeyError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KeyStore[] = {  {&_swigt__p_KeyStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LibError[] = {  {&_swigt__p_LibError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MemoryError[] = {  {&_swigt__p_MemoryError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Signer[] = {  {&_swigt__p_Signer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleTrustVerifier[] = {  {&_swigt__p_SimpleTrustVerifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TrustVerificationError[] = {  {&_swigt__p_TrustVerificationError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TrustVerifier[] = {  {&_swigt__p_TrustVerifier, 0, 0, 0},  {&_swigt__p_SimpleTrustVerifier, _p_SimpleTrustVerifierTo_p_TrustVerifier, 0, 0},  {&_swigt__p_X509TrustVerifier, _p_X509TrustVerifierTo_p_TrustVerifier, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueError[] = {  {&_swigt__p_ValueError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Verifier[] = {  {&_swigt__p_Verifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_X509Certificate[] = {  {&_swigt__p_X509Certificate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_X509TrustVerifier[] = {  {&_swigt__p_X509TrustVerifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XMLError[] = {  {&_swigt__p_XMLError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XPath[] = {  {&_swigt__p_XPath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XPathError[] = {  {&_swigt__p_XPathError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlDoc[] = {  {&_swigt__p_XmlDoc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlElement[] = {  {&_swigt__p_XmlElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__out_of_range[] = {  {&_swigt__p_std__out_of_range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTCountPtrToTKey_t_t[] = {  {&_swigt__p_std__vectorTCountPtrToTKey_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTCountPtrToTX509Certificate_t_t[] = {  {&_swigt__p_std__vectorTCountPtrToTX509Certificate_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTCountPtrToTXmlElement_t_t[] = {  {&_swigt__p_std__vectorTCountPtrToTXmlElement_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorTCountPtrToTX509Certificate_t_t[] = {  {&_swigt__p_vectorTCountPtrToTX509Certificate_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xmlNodePtr[] = {  {&_swigt__p_xmlNodePtr, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CountPtrToTKeyStore_t,
  _swigc__p_CountPtrToTKey_t,
  _swigc__p_CountPtrToTX509Certificate_t,
  _swigc__p_CountPtrToTXPath_t,
  _swigc__p_CountPtrToTXmlDoc_t,
  _swigc__p_CountPtrToTXmlElement_t,
  _swigc__p_DocError,
  _swigc__p_DsigException,
  _swigc__p_IOError,
  _swigc__p_Key,
  _swigc__p_KeyError,
  _swigc__p_KeyStore,
  _swigc__p_LibError,
  _swigc__p_MemoryError,
  _swigc__p_Signer,
  _swigc__p_SimpleTrustVerifier,
  _swigc__p_TrustVerificationError,
  _swigc__p_TrustVerifier,
  _swigc__p_ValueError,
  _swigc__p_Verifier,
  _swigc__p_X509Certificate,
  _swigc__p_X509TrustVerifier,
  _swigc__p_XMLError,
  _swigc__p_XPath,
  _swigc__p_XPathError,
  _swigc__p_XmlDoc,
  _swigc__p_XmlElement,
  _swigc__p_char,
  _swigc__p_std__out_of_range,
  _swigc__p_std__vectorTCountPtrToTKey_t_t,
  _swigc__p_std__vectorTCountPtrToTX509Certificate_t_t,
  _swigc__p_std__vectorTCountPtrToTXmlElement_t_t,
  _swigc__p_vectorTCountPtrToTX509Certificate_t_t,
  _swigc__p_xmlNodePtr,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_xmlsig(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mXmlsig = rb_define_module("Xmlsig");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  rb_define_module_function(mXmlsig, "dsigInit", VALUEFUNC(_wrap_dsigInit), -1);
  rb_define_module_function(mXmlsig, "dsigShutdown", VALUEFUNC(_wrap_dsigShutdown), -1);
  
  dsigInit();
  
  
  cDsigException.klass = rb_define_class_under(mXmlsig, "DsigException", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_DsigException, (void *) &cDsigException);
  rb_define_alloc_func(cDsigException.klass, _wrap_DsigException_allocate);
  rb_define_method(cDsigException.klass, "initialize", VALUEFUNC(_wrap_new_DsigException), -1);
  rb_define_method(cDsigException.klass, "what", VALUEFUNC(_wrap_DsigException_what), -1);
  cDsigException.mark = 0;
  cDsigException.destroy = (void (*)(void *)) free_DsigException;
  cDsigException.trackObjects = 1;
  
  cIOError.klass = rb_define_class_under(mXmlsig, "IOError", ((swig_class *) SWIGTYPE_p_DsigException->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_IOError, (void *) &cIOError);
  rb_define_alloc_func(cIOError.klass, _wrap_IOError_allocate);
  rb_define_method(cIOError.klass, "initialize", VALUEFUNC(_wrap_new_IOError), -1);
  cIOError.mark = 0;
  cIOError.destroy = (void (*)(void *)) free_IOError;
  cIOError.trackObjects = 1;
  
  cMemoryError.klass = rb_define_class_under(mXmlsig, "MemoryError", ((swig_class *) SWIGTYPE_p_DsigException->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_MemoryError, (void *) &cMemoryError);
  rb_define_alloc_func(cMemoryError.klass, _wrap_MemoryError_allocate);
  rb_define_method(cMemoryError.klass, "initialize", VALUEFUNC(_wrap_new_MemoryError), -1);
  cMemoryError.mark = 0;
  cMemoryError.destroy = (void (*)(void *)) free_MemoryError;
  cMemoryError.trackObjects = 1;
  
  cValueError.klass = rb_define_class_under(mXmlsig, "ValueError", ((swig_class *) SWIGTYPE_p_DsigException->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_ValueError, (void *) &cValueError);
  rb_define_alloc_func(cValueError.klass, _wrap_ValueError_allocate);
  rb_define_method(cValueError.klass, "initialize", VALUEFUNC(_wrap_new_ValueError), -1);
  cValueError.mark = 0;
  cValueError.destroy = (void (*)(void *)) free_ValueError;
  cValueError.trackObjects = 1;
  
  cXMLError.klass = rb_define_class_under(mXmlsig, "XMLError", ((swig_class *) SWIGTYPE_p_DsigException->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_XMLError, (void *) &cXMLError);
  rb_define_alloc_func(cXMLError.klass, _wrap_XMLError_allocate);
  rb_define_method(cXMLError.klass, "initialize", VALUEFUNC(_wrap_new_XMLError), -1);
  cXMLError.mark = 0;
  cXMLError.destroy = (void (*)(void *)) free_XMLError;
  cXMLError.trackObjects = 1;
  
  cKeyError.klass = rb_define_class_under(mXmlsig, "KeyError", ((swig_class *) SWIGTYPE_p_DsigException->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_KeyError, (void *) &cKeyError);
  rb_define_alloc_func(cKeyError.klass, _wrap_KeyError_allocate);
  rb_define_method(cKeyError.klass, "initialize", VALUEFUNC(_wrap_new_KeyError), -1);
  cKeyError.mark = 0;
  cKeyError.destroy = (void (*)(void *)) free_KeyError;
  cKeyError.trackObjects = 1;
  
  cDocError.klass = rb_define_class_under(mXmlsig, "DocError", ((swig_class *) SWIGTYPE_p_DsigException->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_DocError, (void *) &cDocError);
  rb_define_alloc_func(cDocError.klass, _wrap_DocError_allocate);
  rb_define_method(cDocError.klass, "initialize", VALUEFUNC(_wrap_new_DocError), -1);
  cDocError.mark = 0;
  cDocError.destroy = (void (*)(void *)) free_DocError;
  cDocError.trackObjects = 1;
  
  cXPathError.klass = rb_define_class_under(mXmlsig, "XPathError", ((swig_class *) SWIGTYPE_p_DsigException->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_XPathError, (void *) &cXPathError);
  rb_define_alloc_func(cXPathError.klass, _wrap_XPathError_allocate);
  rb_define_method(cXPathError.klass, "initialize", VALUEFUNC(_wrap_new_XPathError), -1);
  cXPathError.mark = 0;
  cXPathError.destroy = (void (*)(void *)) free_XPathError;
  cXPathError.trackObjects = 1;
  
  cTrustVerificationError.klass = rb_define_class_under(mXmlsig, "TrustVerificationError", ((swig_class *) SWIGTYPE_p_DsigException->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TrustVerificationError, (void *) &cTrustVerificationError);
  rb_define_alloc_func(cTrustVerificationError.klass, _wrap_TrustVerificationError_allocate);
  rb_define_method(cTrustVerificationError.klass, "initialize", VALUEFUNC(_wrap_new_TrustVerificationError), -1);
  cTrustVerificationError.mark = 0;
  cTrustVerificationError.destroy = (void (*)(void *)) free_TrustVerificationError;
  cTrustVerificationError.trackObjects = 1;
  
  cLibError.klass = rb_define_class_under(mXmlsig, "LibError", ((swig_class *) SWIGTYPE_p_DsigException->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_LibError, (void *) &cLibError);
  rb_define_alloc_func(cLibError.klass, _wrap_LibError_allocate);
  rb_define_method(cLibError.klass, "initialize", VALUEFUNC(_wrap_new_LibError), -1);
  rb_define_singleton_method(cLibError.klass, "clearErrorLogs", VALUEFUNC(_wrap_LibError_clearErrorLogs), -1);
  cLibError.mark = 0;
  cLibError.destroy = (void (*)(void *)) free_LibError;
  cLibError.trackObjects = 1;
  
  cX509CertificateBase.klass = rb_define_class_under(mXmlsig, "X509CertificateBase", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_X509Certificate, (void *) &cX509CertificateBase);
  rb_define_alloc_func(cX509CertificateBase.klass, _wrap_X509CertificateBase_allocate);
  rb_define_method(cX509CertificateBase.klass, "initialize", VALUEFUNC(_wrap_new_X509CertificateBase), -1);
  rb_define_method(cX509CertificateBase.klass, "loadFromFile", VALUEFUNC(_wrap_X509CertificateBase_loadFromFile), -1);
  rb_define_method(cX509CertificateBase.klass, "getSubjectDN", VALUEFUNC(_wrap_X509CertificateBase_getSubjectDN), -1);
  rb_define_method(cX509CertificateBase.klass, "getIssuerDN", VALUEFUNC(_wrap_X509CertificateBase_getIssuerDN), -1);
  rb_define_method(cX509CertificateBase.klass, "getVersion", VALUEFUNC(_wrap_X509CertificateBase_getVersion), -1);
  rb_define_method(cX509CertificateBase.klass, "isValid", VALUEFUNC(_wrap_X509CertificateBase_isValid), -1);
  rb_define_method(cX509CertificateBase.klass, "getBasicConstraints", VALUEFUNC(_wrap_X509CertificateBase_getBasicConstraints), -1);
  rb_define_method(cX509CertificateBase.klass, "getKey", VALUEFUNC(_wrap_X509CertificateBase_getKey), -1);
  cX509CertificateBase.mark = 0;
  cX509CertificateBase.destroy = (void (*)(void *)) free_X509Certificate;
  cX509CertificateBase.trackObjects = 1;
  
  cX509Certificate.klass = rb_define_class_under(mXmlsig, "X509Certificate", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CountPtrToTX509Certificate_t, (void *) &cX509Certificate);
  rb_define_alloc_func(cX509Certificate.klass, _wrap_X509Certificate_allocate);
  rb_define_method(cX509Certificate.klass, "initialize", VALUEFUNC(_wrap_new_X509Certificate), -1);
  rb_define_method(cX509Certificate.klass, "__deref__", VALUEFUNC(_wrap_X509Certificate___deref__), -1);
  rb_define_method(cX509Certificate.klass, "loadFromFile", VALUEFUNC(_wrap_X509Certificate_loadFromFile), -1);
  rb_define_method(cX509Certificate.klass, "getSubjectDN", VALUEFUNC(_wrap_X509Certificate_getSubjectDN), -1);
  rb_define_method(cX509Certificate.klass, "getIssuerDN", VALUEFUNC(_wrap_X509Certificate_getIssuerDN), -1);
  rb_define_method(cX509Certificate.klass, "getVersion", VALUEFUNC(_wrap_X509Certificate_getVersion), -1);
  rb_define_method(cX509Certificate.klass, "isValid", VALUEFUNC(_wrap_X509Certificate_isValid), -1);
  rb_define_method(cX509Certificate.klass, "getBasicConstraints", VALUEFUNC(_wrap_X509Certificate_getBasicConstraints), -1);
  rb_define_method(cX509Certificate.klass, "getKey", VALUEFUNC(_wrap_X509Certificate_getKey), -1);
  cX509Certificate.mark = 0;
  cX509Certificate.destroy = (void (*)(void *)) free_CountPtrTo_Sl_X509Certificate_Sg_;
  cX509Certificate.trackObjects = 1;
  
  cX509CertificateVector.klass = rb_define_class_under(mXmlsig, "X509CertificateVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorTCountPtrToTX509Certificate_t_t, (void *) &cX509CertificateVector);
  rb_include_module(cX509CertificateVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(cX509CertificateVector.klass, _wrap_X509CertificateVector_allocate);
  rb_define_method(cX509CertificateVector.klass, "initialize", VALUEFUNC(_wrap_new_X509CertificateVector), -1);
  rb_define_method(cX509CertificateVector.klass, "length", VALUEFUNC(_wrap_X509CertificateVector___len__), -1);
  rb_define_method(cX509CertificateVector.klass, "empty?", VALUEFUNC(_wrap_X509CertificateVector_emptyq___), -1);
  rb_define_method(cX509CertificateVector.klass, "clear", VALUEFUNC(_wrap_X509CertificateVector_clear), -1);
  rb_define_method(cX509CertificateVector.klass, "push", VALUEFUNC(_wrap_X509CertificateVector_push), -1);
  rb_define_method(cX509CertificateVector.klass, "pop", VALUEFUNC(_wrap_X509CertificateVector_pop), -1);
  rb_define_method(cX509CertificateVector.klass, "[]", VALUEFUNC(_wrap_X509CertificateVector___getitem__), -1);
  rb_define_method(cX509CertificateVector.klass, "[]=", VALUEFUNC(_wrap_X509CertificateVector___setitem__), -1);
  rb_define_method(cX509CertificateVector.klass, "each", VALUEFUNC(_wrap_X509CertificateVector_each), -1);
  cX509CertificateVector.mark = 0;
  cX509CertificateVector.destroy = (void (*)(void *)) free_std_vector_Sl_X509CertificatePtr_Sg_;
  cX509CertificateVector.trackObjects = 1;
  
  cKeyBase.klass = rb_define_class_under(mXmlsig, "KeyBase", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Key, (void *) &cKeyBase);
  rb_define_alloc_func(cKeyBase.klass, _wrap_KeyBase_allocate);
  rb_define_method(cKeyBase.klass, "initialize", VALUEFUNC(_wrap_new_KeyBase), -1);
  rb_define_method(cKeyBase.klass, "loadFromFile", VALUEFUNC(_wrap_KeyBase_loadFromFile), -1);
  rb_define_method(cKeyBase.klass, "loadFromKeyInfoFile", VALUEFUNC(_wrap_KeyBase_loadFromKeyInfoFile), -1);
  rb_define_method(cKeyBase.klass, "loadHMACFromString", VALUEFUNC(_wrap_KeyBase_loadHMACFromString), -1);
  rb_define_method(cKeyBase.klass, "setName", VALUEFUNC(_wrap_KeyBase_setName), -1);
  rb_define_method(cKeyBase.klass, "getName", VALUEFUNC(_wrap_KeyBase_getName), -1);
  rb_define_method(cKeyBase.klass, "isValid", VALUEFUNC(_wrap_KeyBase_isValid), -1);
  rb_define_method(cKeyBase.klass, "getCertificate", VALUEFUNC(_wrap_KeyBase_getCertificate), -1);
  rb_define_method(cKeyBase.klass, "getCertificateChain", VALUEFUNC(_wrap_KeyBase_getCertificateChain), -1);
  rb_define_method(cKeyBase.klass, "dump", VALUEFUNC(_wrap_KeyBase_dump), -1);
  cKeyBase.mark = 0;
  cKeyBase.destroy = (void (*)(void *)) free_Key;
  cKeyBase.trackObjects = 1;
  
  cKey.klass = rb_define_class_under(mXmlsig, "Key", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CountPtrToTKey_t, (void *) &cKey);
  rb_define_alloc_func(cKey.klass, _wrap_Key_allocate);
  rb_define_method(cKey.klass, "initialize", VALUEFUNC(_wrap_new_Key), -1);
  rb_define_method(cKey.klass, "__deref__", VALUEFUNC(_wrap_Key___deref__), -1);
  rb_define_method(cKey.klass, "loadFromFile", VALUEFUNC(_wrap_Key_loadFromFile), -1);
  rb_define_method(cKey.klass, "loadFromKeyInfoFile", VALUEFUNC(_wrap_Key_loadFromKeyInfoFile), -1);
  rb_define_method(cKey.klass, "loadHMACFromString", VALUEFUNC(_wrap_Key_loadHMACFromString), -1);
  rb_define_method(cKey.klass, "setName", VALUEFUNC(_wrap_Key_setName), -1);
  rb_define_method(cKey.klass, "getName", VALUEFUNC(_wrap_Key_getName), -1);
  rb_define_method(cKey.klass, "isValid", VALUEFUNC(_wrap_Key_isValid), -1);
  rb_define_method(cKey.klass, "getCertificate", VALUEFUNC(_wrap_Key_getCertificate), -1);
  rb_define_method(cKey.klass, "getCertificateChain", VALUEFUNC(_wrap_Key_getCertificateChain), -1);
  rb_define_method(cKey.klass, "dump", VALUEFUNC(_wrap_Key_dump), -1);
  cKey.mark = 0;
  cKey.destroy = (void (*)(void *)) free_CountPtrTo_Sl_Key_Sg_;
  cKey.trackObjects = 1;
  
  cKeyVector.klass = rb_define_class_under(mXmlsig, "KeyVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorTCountPtrToTKey_t_t, (void *) &cKeyVector);
  rb_include_module(cKeyVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(cKeyVector.klass, _wrap_KeyVector_allocate);
  rb_define_method(cKeyVector.klass, "initialize", VALUEFUNC(_wrap_new_KeyVector), -1);
  rb_define_method(cKeyVector.klass, "length", VALUEFUNC(_wrap_KeyVector___len__), -1);
  rb_define_method(cKeyVector.klass, "empty?", VALUEFUNC(_wrap_KeyVector_emptyq___), -1);
  rb_define_method(cKeyVector.klass, "clear", VALUEFUNC(_wrap_KeyVector_clear), -1);
  rb_define_method(cKeyVector.klass, "push", VALUEFUNC(_wrap_KeyVector_push), -1);
  rb_define_method(cKeyVector.klass, "pop", VALUEFUNC(_wrap_KeyVector_pop), -1);
  rb_define_method(cKeyVector.klass, "[]", VALUEFUNC(_wrap_KeyVector___getitem__), -1);
  rb_define_method(cKeyVector.klass, "[]=", VALUEFUNC(_wrap_KeyVector___setitem__), -1);
  rb_define_method(cKeyVector.klass, "each", VALUEFUNC(_wrap_KeyVector_each), -1);
  cKeyVector.mark = 0;
  cKeyVector.destroy = (void (*)(void *)) free_std_vector_Sl_KeyPtr_Sg_;
  cKeyVector.trackObjects = 1;
  
  cKeyStoreBase.klass = rb_define_class_under(mXmlsig, "KeyStoreBase", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_KeyStore, (void *) &cKeyStoreBase);
  rb_define_alloc_func(cKeyStoreBase.klass, _wrap_KeyStoreBase_allocate);
  rb_define_method(cKeyStoreBase.klass, "initialize", VALUEFUNC(_wrap_new_KeyStoreBase), -1);
  rb_define_method(cKeyStoreBase.klass, "addTrustedCert", VALUEFUNC(_wrap_KeyStoreBase_addTrustedCert), -1);
  rb_define_method(cKeyStoreBase.klass, "addUntrustedCert", VALUEFUNC(_wrap_KeyStoreBase_addUntrustedCert), -1);
  rb_define_method(cKeyStoreBase.klass, "addTrustedCertFromFile", VALUEFUNC(_wrap_KeyStoreBase_addTrustedCertFromFile), -1);
  rb_define_method(cKeyStoreBase.klass, "addUntrustedCertFromFile", VALUEFUNC(_wrap_KeyStoreBase_addUntrustedCertFromFile), -1);
  rb_define_method(cKeyStoreBase.klass, "addKey", VALUEFUNC(_wrap_KeyStoreBase_addKey), -1);
  rb_define_method(cKeyStoreBase.klass, "addKeyFromFile", VALUEFUNC(_wrap_KeyStoreBase_addKeyFromFile), -1);
  rb_define_method(cKeyStoreBase.klass, "saveToFile", VALUEFUNC(_wrap_KeyStoreBase_saveToFile), -1);
  rb_define_method(cKeyStoreBase.klass, "loadFromFile", VALUEFUNC(_wrap_KeyStoreBase_loadFromFile), -1);
  cKeyStoreBase.mark = 0;
  cKeyStoreBase.destroy = (void (*)(void *)) free_KeyStore;
  cKeyStoreBase.trackObjects = 1;
  
  cKeyStore.klass = rb_define_class_under(mXmlsig, "KeyStore", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CountPtrToTKeyStore_t, (void *) &cKeyStore);
  rb_define_alloc_func(cKeyStore.klass, _wrap_KeyStore_allocate);
  rb_define_method(cKeyStore.klass, "initialize", VALUEFUNC(_wrap_new_KeyStore), -1);
  rb_define_method(cKeyStore.klass, "__deref__", VALUEFUNC(_wrap_KeyStore___deref__), -1);
  rb_define_method(cKeyStore.klass, "addTrustedCert", VALUEFUNC(_wrap_KeyStore_addTrustedCert), -1);
  rb_define_method(cKeyStore.klass, "addUntrustedCert", VALUEFUNC(_wrap_KeyStore_addUntrustedCert), -1);
  rb_define_method(cKeyStore.klass, "addTrustedCertFromFile", VALUEFUNC(_wrap_KeyStore_addTrustedCertFromFile), -1);
  rb_define_method(cKeyStore.klass, "addUntrustedCertFromFile", VALUEFUNC(_wrap_KeyStore_addUntrustedCertFromFile), -1);
  rb_define_method(cKeyStore.klass, "addKey", VALUEFUNC(_wrap_KeyStore_addKey), -1);
  rb_define_method(cKeyStore.klass, "addKeyFromFile", VALUEFUNC(_wrap_KeyStore_addKeyFromFile), -1);
  rb_define_method(cKeyStore.klass, "saveToFile", VALUEFUNC(_wrap_KeyStore_saveToFile), -1);
  rb_define_method(cKeyStore.klass, "loadFromFile", VALUEFUNC(_wrap_KeyStore_loadFromFile), -1);
  cKeyStore.mark = 0;
  cKeyStore.destroy = (void (*)(void *)) free_CountPtrTo_Sl_KeyStore_Sg_;
  cKeyStore.trackObjects = 1;
  
  cXmlDocBase.klass = rb_define_class_under(mXmlsig, "XmlDocBase", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlDoc, (void *) &cXmlDocBase);
  rb_define_alloc_func(cXmlDocBase.klass, _wrap_XmlDocBase_allocate);
  rb_define_method(cXmlDocBase.klass, "initialize", VALUEFUNC(_wrap_new_XmlDocBase), -1);
  rb_define_method(cXmlDocBase.klass, "loadFromString", VALUEFUNC(_wrap_XmlDocBase_loadFromString), -1);
  rb_define_method(cXmlDocBase.klass, "loadFromFile", VALUEFUNC(_wrap_XmlDocBase_loadFromFile), -1);
  rb_define_method(cXmlDocBase.klass, "toString", VALUEFUNC(_wrap_XmlDocBase_toString), -1);
  rb_define_method(cXmlDocBase.klass, "toFile", VALUEFUNC(_wrap_XmlDocBase_toFile), -1);
  rb_define_method(cXmlDocBase.klass, "dump", VALUEFUNC(_wrap_XmlDocBase_dump), -1);
  rb_define_method(cXmlDocBase.klass, "addIdAttr", VALUEFUNC(_wrap_XmlDocBase_addIdAttr), -1);
  cXmlDocBase.mark = 0;
  cXmlDocBase.destroy = (void (*)(void *)) free_XmlDoc;
  cXmlDocBase.trackObjects = 1;
  
  cXmlDoc.klass = rb_define_class_under(mXmlsig, "XmlDoc", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CountPtrToTXmlDoc_t, (void *) &cXmlDoc);
  rb_define_alloc_func(cXmlDoc.klass, _wrap_XmlDoc_allocate);
  rb_define_method(cXmlDoc.klass, "initialize", VALUEFUNC(_wrap_new_XmlDoc), -1);
  rb_define_method(cXmlDoc.klass, "__deref__", VALUEFUNC(_wrap_XmlDoc___deref__), -1);
  rb_define_method(cXmlDoc.klass, "loadFromString", VALUEFUNC(_wrap_XmlDoc_loadFromString), -1);
  rb_define_method(cXmlDoc.klass, "loadFromFile", VALUEFUNC(_wrap_XmlDoc_loadFromFile), -1);
  rb_define_method(cXmlDoc.klass, "toString", VALUEFUNC(_wrap_XmlDoc_toString), -1);
  rb_define_method(cXmlDoc.klass, "toFile", VALUEFUNC(_wrap_XmlDoc_toFile), -1);
  rb_define_method(cXmlDoc.klass, "dump", VALUEFUNC(_wrap_XmlDoc_dump), -1);
  rb_define_method(cXmlDoc.klass, "addIdAttr", VALUEFUNC(_wrap_XmlDoc_addIdAttr), -1);
  cXmlDoc.mark = 0;
  cXmlDoc.destroy = (void (*)(void *)) free_CountPtrTo_Sl_XmlDoc_Sg_;
  cXmlDoc.trackObjects = 1;
  
  cXPathBase.klass = rb_define_class_under(mXmlsig, "XPathBase", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XPath, (void *) &cXPathBase);
  rb_define_alloc_func(cXPathBase.klass, _wrap_XPathBase_allocate);
  rb_define_method(cXPathBase.klass, "initialize", VALUEFUNC(_wrap_new_XPathBase), -1);
  rb_define_method(cXPathBase.klass, "addNamespace", VALUEFUNC(_wrap_XPathBase_addNamespace), -1);
  rb_define_method(cXPathBase.klass, "getXPath", VALUEFUNC(_wrap_XPathBase_getXPath), -1);
  rb_define_method(cXPathBase.klass, "setXPath", VALUEFUNC(_wrap_XPathBase_setXPath), -1);
  cXPathBase.mark = 0;
  cXPathBase.destroy = (void (*)(void *)) free_XPath;
  cXPathBase.trackObjects = 1;
  
  cXPath.klass = rb_define_class_under(mXmlsig, "XPath", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CountPtrToTXPath_t, (void *) &cXPath);
  rb_define_alloc_func(cXPath.klass, _wrap_XPath_allocate);
  rb_define_method(cXPath.klass, "initialize", VALUEFUNC(_wrap_new_XPath), -1);
  rb_define_method(cXPath.klass, "__deref__", VALUEFUNC(_wrap_XPath___deref__), -1);
  rb_define_method(cXPath.klass, "addNamespace", VALUEFUNC(_wrap_XPath_addNamespace), -1);
  rb_define_method(cXPath.klass, "getXPath", VALUEFUNC(_wrap_XPath_getXPath), -1);
  rb_define_method(cXPath.klass, "setXPath", VALUEFUNC(_wrap_XPath_setXPath), -1);
  cXPath.mark = 0;
  cXPath.destroy = (void (*)(void *)) free_CountPtrTo_Sl_XPath_Sg_;
  cXPath.trackObjects = 1;
  
  cXmlElementBase.klass = rb_define_class_under(mXmlsig, "XmlElementBase", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlElement, (void *) &cXmlElementBase);
  rb_define_alloc_func(cXmlElementBase.klass, _wrap_XmlElementBase_allocate);
  rb_define_method(cXmlElementBase.klass, "initialize", VALUEFUNC(_wrap_new_XmlElementBase), -1);
  rb_define_method(cXmlElementBase.klass, "getNode", VALUEFUNC(_wrap_XmlElementBase_getNode), -1);
  rb_define_method(cXmlElementBase.klass, "getTagName", VALUEFUNC(_wrap_XmlElementBase_getTagName), -1);
  rb_define_method(cXmlElementBase.klass, "getAttribute", VALUEFUNC(_wrap_XmlElementBase_getAttribute), -1);
  rb_define_method(cXmlElementBase.klass, "getNodePath", VALUEFUNC(_wrap_XmlElementBase_getNodePath), -1);
  cXmlElementBase.mark = 0;
  cXmlElementBase.destroy = (void (*)(void *)) free_XmlElement;
  cXmlElementBase.trackObjects = 1;
  
  cXmlElement.klass = rb_define_class_under(mXmlsig, "XmlElement", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CountPtrToTXmlElement_t, (void *) &cXmlElement);
  rb_define_alloc_func(cXmlElement.klass, _wrap_XmlElement_allocate);
  rb_define_method(cXmlElement.klass, "initialize", VALUEFUNC(_wrap_new_XmlElement), -1);
  rb_define_method(cXmlElement.klass, "__deref__", VALUEFUNC(_wrap_XmlElement___deref__), -1);
  rb_define_method(cXmlElement.klass, "getNode", VALUEFUNC(_wrap_XmlElement_getNode), -1);
  rb_define_method(cXmlElement.klass, "getTagName", VALUEFUNC(_wrap_XmlElement_getTagName), -1);
  rb_define_method(cXmlElement.klass, "getAttribute", VALUEFUNC(_wrap_XmlElement_getAttribute), -1);
  rb_define_method(cXmlElement.klass, "getNodePath", VALUEFUNC(_wrap_XmlElement_getNodePath), -1);
  cXmlElement.mark = 0;
  cXmlElement.destroy = (void (*)(void *)) free_CountPtrTo_Sl_XmlElement_Sg_;
  cXmlElement.trackObjects = 1;
  
  cXmlElementVector.klass = rb_define_class_under(mXmlsig, "XmlElementVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorTCountPtrToTXmlElement_t_t, (void *) &cXmlElementVector);
  rb_include_module(cXmlElementVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(cXmlElementVector.klass, _wrap_XmlElementVector_allocate);
  rb_define_method(cXmlElementVector.klass, "initialize", VALUEFUNC(_wrap_new_XmlElementVector), -1);
  rb_define_method(cXmlElementVector.klass, "length", VALUEFUNC(_wrap_XmlElementVector___len__), -1);
  rb_define_method(cXmlElementVector.klass, "empty?", VALUEFUNC(_wrap_XmlElementVector_emptyq___), -1);
  rb_define_method(cXmlElementVector.klass, "clear", VALUEFUNC(_wrap_XmlElementVector_clear), -1);
  rb_define_method(cXmlElementVector.klass, "push", VALUEFUNC(_wrap_XmlElementVector_push), -1);
  rb_define_method(cXmlElementVector.klass, "pop", VALUEFUNC(_wrap_XmlElementVector_pop), -1);
  rb_define_method(cXmlElementVector.klass, "[]", VALUEFUNC(_wrap_XmlElementVector___getitem__), -1);
  rb_define_method(cXmlElementVector.klass, "[]=", VALUEFUNC(_wrap_XmlElementVector___setitem__), -1);
  rb_define_method(cXmlElementVector.klass, "each", VALUEFUNC(_wrap_XmlElementVector_each), -1);
  cXmlElementVector.mark = 0;
  cXmlElementVector.destroy = (void (*)(void *)) free_std_vector_Sl_XmlElementPtr_Sg_;
  cXmlElementVector.trackObjects = 1;
  
  cSigner.klass = rb_define_class_under(mXmlsig, "Signer", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Signer, (void *) &cSigner);
  rb_define_alloc_func(cSigner.klass, _wrap_Signer_allocate);
  rb_define_method(cSigner.klass, "initialize", VALUEFUNC(_wrap_new_Signer), -1);
  rb_define_method(cSigner.klass, "sign", VALUEFUNC(_wrap_Signer_sign), -1);
  rb_define_method(cSigner.klass, "signInPlace", VALUEFUNC(_wrap_Signer_signInPlace), -1);
  rb_define_method(cSigner.klass, "setKeyStore", VALUEFUNC(_wrap_Signer_setKeyStore), -1);
  rb_define_method(cSigner.klass, "addCertFromFile", VALUEFUNC(_wrap_Signer_addCertFromFile), -1);
  rb_define_method(cSigner.klass, "addCert", VALUEFUNC(_wrap_Signer_addCert), -1);
  rb_define_method(cSigner.klass, "useExclusiveCanonicalizer", VALUEFUNC(_wrap_Signer_useExclusiveCanonicalizer), -1);
  rb_define_method(cSigner.klass, "addReference", VALUEFUNC(_wrap_Signer_addReference), -1);
  rb_define_method(cSigner.klass, "attachPublicKey", VALUEFUNC(_wrap_Signer_attachPublicKey), -1);
  cSigner.mark = 0;
  cSigner.destroy = (void (*)(void *)) free_Signer;
  cSigner.trackObjects = 1;
  
  cVerifier.klass = rb_define_class_under(mXmlsig, "Verifier", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Verifier, (void *) &cVerifier);
  rb_define_alloc_func(cVerifier.klass, _wrap_Verifier_allocate);
  rb_define_method(cVerifier.klass, "initialize", VALUEFUNC(_wrap_new_Verifier), -1);
  rb_define_method(cVerifier.klass, "setKeyStore", VALUEFUNC(_wrap_Verifier_setKeyStore), -1);
  rb_define_method(cVerifier.klass, "verify", VALUEFUNC(_wrap_Verifier_verify), -1);
  rb_define_method(cVerifier.klass, "getVerifyingKey", VALUEFUNC(_wrap_Verifier_getVerifyingKey), -1);
  rb_define_method(cVerifier.klass, "isReferenced", VALUEFUNC(_wrap_Verifier_isReferenced), -1);
  rb_define_method(cVerifier.klass, "getReferencedElements", VALUEFUNC(_wrap_Verifier_getReferencedElements), -1);
  rb_define_method(cVerifier.klass, "getCertificate", VALUEFUNC(_wrap_Verifier_getCertificate), -1);
  rb_define_method(cVerifier.klass, "getCertificateChain", VALUEFUNC(_wrap_Verifier_getCertificateChain), -1);
  rb_define_method(cVerifier.klass, "skipCertCheck", VALUEFUNC(_wrap_Verifier_skipCertCheck), -1);
  cVerifier.mark = 0;
  cVerifier.destroy = (void (*)(void *)) free_Verifier;
  cVerifier.trackObjects = 1;
  
  cTrustVerifier.klass = rb_define_class_under(mXmlsig, "TrustVerifier", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TrustVerifier, (void *) &cTrustVerifier);
  rb_define_alloc_func(cTrustVerifier.klass, _wrap_TrustVerifier_allocate);
  rb_define_method(cTrustVerifier.klass, "initialize", VALUEFUNC(_wrap_new_TrustVerifier), -1);
  rb_define_method(cTrustVerifier.klass, "verifyTrust", VALUEFUNC(_wrap_TrustVerifier_verifyTrust), -1);
  cTrustVerifier.mark = 0;
  cTrustVerifier.destroy = (void (*)(void *)) free_TrustVerifier;
  cTrustVerifier.trackObjects = 1;
  
  cSimpleTrustVerifier.klass = rb_define_class_under(mXmlsig, "SimpleTrustVerifier", ((swig_class *) SWIGTYPE_p_TrustVerifier->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_SimpleTrustVerifier, (void *) &cSimpleTrustVerifier);
  rb_define_alloc_func(cSimpleTrustVerifier.klass, _wrap_SimpleTrustVerifier_allocate);
  rb_define_method(cSimpleTrustVerifier.klass, "initialize", VALUEFUNC(_wrap_new_SimpleTrustVerifier), -1);
  rb_define_method(cSimpleTrustVerifier.klass, "verifyTrust", VALUEFUNC(_wrap_SimpleTrustVerifier_verifyTrust), -1);
  cSimpleTrustVerifier.mark = 0;
  cSimpleTrustVerifier.destroy = (void (*)(void *)) free_SimpleTrustVerifier;
  cSimpleTrustVerifier.trackObjects = 1;
  
  cX509TrustVerifier.klass = rb_define_class_under(mXmlsig, "X509TrustVerifier", ((swig_class *) SWIGTYPE_p_TrustVerifier->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_X509TrustVerifier, (void *) &cX509TrustVerifier);
  rb_define_alloc_func(cX509TrustVerifier.klass, _wrap_X509TrustVerifier_allocate);
  rb_define_method(cX509TrustVerifier.klass, "initialize", VALUEFUNC(_wrap_new_X509TrustVerifier), -1);
  rb_define_method(cX509TrustVerifier.klass, "verifyTrust", VALUEFUNC(_wrap_X509TrustVerifier_verifyTrust), -1);
  cX509TrustVerifier.mark = 0;
  cX509TrustVerifier.destroy = (void (*)(void *)) free_X509TrustVerifier;
  cX509TrustVerifier.trackObjects = 1;
}

